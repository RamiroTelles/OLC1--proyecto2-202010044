
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import structuras.tablaJson;
import structuras.fallos;
import structuras.arbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\051\004\000\002\051\005" +
    "\000\002\046\011\000\002\047\004\000\002\047\003\000" +
    "\002\050\006\000\002\050\005\000\002\045\014\000\002" +
    "\044\013\000\002\040\007\000\002\041\004\000\002\041" +
    "\003\000\002\042\005\000\002\042\003\000\002\035\006" +
    "\000\002\036\006\000\002\036\007\000\002\037\006\000" +
    "\002\037\004\000\002\034\011\000\002\031\011\000\002" +
    "\032\005\000\002\032\003\000\002\033\005\000\002\033" +
    "\003\000\002\030\007\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\005\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\005" +
    "\000\002\011\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\004\000\002\013\003\000\002\014\004\000\002" +
    "\014\003\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\016\004\000\002\016\003\000\002\017\004\000" +
    "\002\017\004\000\002\020\004\000\002\020\003\000\002" +
    "\022\004\000\002\022\004\000\002\021\004\000\002\021" +
    "\003\000\002\023\004\000\002\023\004\000\002\024\005" +
    "\000\002\024\003\000\002\026\004\000\002\026\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\043\005" +
    "\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\044\034\027\041\015\042\036\043\023\044" +
    "\040\045\026\050\033\051\017\052\037\054\013\055\016" +
    "\056\041\057\012\060\005\064\034\065\004\066\043\001" +
    "\002\000\004\040\316\001\002\000\004\006\277\001\002" +
    "\000\054\002\ufffc\011\ufffc\034\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\050\ufffc\051\ufffc\052\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\001\002\000\054\002\ufff8\011\ufff8" +
    "\034\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\050" +
    "\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\064\ufff8\065\ufff8\066\ufff8\001" +
    "\002\000\046\002\276\034\027\041\015\042\036\043\023" +
    "\044\040\045\026\050\033\051\017\052\037\054\013\055" +
    "\016\056\041\057\012\060\005\064\034\065\004\066\043" +
    "\001\002\000\004\040\275\001\002\000\004\006\261\001" +
    "\002\000\004\006\253\001\002\000\054\002\ufff6\011\ufff6" +
    "\034\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\062\ufff6\064\ufff6\065\ufff6\066\ufff6\001" +
    "\002\000\004\034\uffd0\001\002\000\004\034\247\001\002" +
    "\000\004\006\243\001\002\000\054\002\ufffa\011\ufffa\034" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\064\ufffa\065\ufffa\066\ufffa\001\002" +
    "\000\054\002\uffff\011\uffff\034\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\050\uffff\051\uffff\052\uffff\054\uffff" +
    "\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\064" +
    "\uffff\065\uffff\066\uffff\001\002\000\054\002\ufffb\011\ufffb" +
    "\034\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\064\ufffb\065\ufffb\066\ufffb\001" +
    "\002\000\004\034\uffce\001\002\000\054\002\ufff1\011\ufff1" +
    "\034\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\064\ufff1\065\ufff1\066\ufff1\001" +
    "\002\000\004\040\242\001\002\000\004\034\uffcc\001\002" +
    "\000\012\006\146\012\235\017\234\020\236\001\002\000" +
    "\004\034\206\001\002\000\054\002\ufff9\011\ufff9\034\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\064\ufff9\065\ufff9\066\ufff9\001\002\000" +
    "\054\002\ufff4\011\ufff4\034\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\001\002\000\004\034\uffcb\001\002\000" +
    "\004\040\205\001\002\000\054\002\ufffe\011\ufffe\034\ufffe" +
    "\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe" +
    "\061\ufffe\062\ufffe\064\ufffe\065\ufffe\066\ufffe\001\002\000" +
    "\004\034\uffcf\001\002\000\004\006\170\001\002\000\004" +
    "\034\uffcd\001\002\000\004\010\157\001\002\000\054\002" +
    "\ufff5\011\ufff5\034\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\050\ufff5\051\ufff5\052\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\064\ufff5\065\ufff5" +
    "\066\ufff5\001\002\000\032\004\071\006\067\014\044\020" +
    "\046\033\053\034\057\035\062\036\052\037\051\040\072" +
    "\046\073\047\066\001\002\000\050\005\uffa3\007\uffa3\013" +
    "\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\040\uffa3\063\uffa3\001\002\000\016\007\uffc7" +
    "\013\uffc7\031\uffc7\032\uffc7\040\uffc7\063\uffc7\001\002\000" +
    "\026\004\071\006\067\014\044\020\046\034\057\035\062" +
    "\036\052\037\051\046\073\047\066\001\002\000\050\005" +
    "\uffa2\007\uffa2\013\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\040\uffa2\063\uffa2\001\002" +
    "\000\016\007\uffc9\013\uffc9\031\104\032\uffc9\040\uffc9\063" +
    "\uffc9\001\002\000\050\005\uffa9\007\uffa9\013\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\040\uffa9\063\uffa9\001\002\000\050\005\uffa8\007\uffa8\013" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\040\uffa8\063\uffa8\001\002\000\030\004\uffc3" +
    "\006\uffc3\014\uffc3\020\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\046\uffc3\047\uffc3\001\002\000\050\005\uffab" +
    "\007\uffab\013\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\040\uffab\063\uffab\001\002\000" +
    "\036\007\uffc1\013\uffc1\017\123\020\124\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\040" +
    "\uffc1\063\uffc1\001\002\000\046\007\uffb1\013\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\040\uffb1\063\uffb1\001\002\000\052\005\uffa7\006\146\007" +
    "\uffa7\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\040\uffa7\063\uffa7\001\002\000\046" +
    "\007\uffb5\013\uffb5\015\uffb5\016\133\017\uffb5\020\uffb5\021" +
    "\uffb5\022\134\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\040\uffb5\063\uffb5\001\002\000" +
    "\042\007\uffb9\013\uffb9\015\127\017\uffb9\020\uffb9\021\130" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\040\uffb9\063\uffb9\001\002\000\050\005\uffaa" +
    "\007\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\040\uffaa\063\uffaa\001\002\000" +
    "\032\007\uffc5\013\uffc5\023\120\024\117\025\112\026\113" +
    "\027\115\030\116\031\uffc5\032\uffc5\040\uffc5\063\uffc5\001" +
    "\002\000\030\004\071\006\067\014\044\020\046\033\110" +
    "\034\057\035\062\036\052\037\051\046\073\047\066\001" +
    "\002\000\050\005\uffad\007\uffad\013\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\040\uffad" +
    "\063\uffad\001\002\000\050\005\uffa4\007\uffa4\013\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\040\uffa4\063\uffa4\001\002\000\030\004\071\006\067" +
    "\014\044\020\046\033\053\034\057\035\062\036\052\037" +
    "\051\046\073\047\066\001\002\000\006\032\101\040\102" +
    "\001\002\000\024\004\071\014\044\020\046\034\057\035" +
    "\062\036\052\037\051\046\073\047\066\001\002\000\054" +
    "\002\ufff0\011\ufff0\034\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\001\002\000\050\005\uffa5\007\uffa5\013\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5" +
    "\032\uffa5\040\uffa5\063\uffa5\001\002\000\006\005\077\013" +
    "\076\001\002\000\006\005\uff9f\013\uff9f\001\002\000\024" +
    "\004\071\014\044\020\046\034\057\035\062\036\052\037" +
    "\051\046\073\047\066\001\002\000\050\005\uffa6\007\uffa6" +
    "\013\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\040\uffa6\063\uffa6\001\002\000\006\005" +
    "\uffa0\013\uffa0\001\002\000\030\004\071\006\067\014\044" +
    "\020\046\033\053\034\057\035\062\036\052\037\051\046" +
    "\073\047\066\001\002\000\054\002\uffef\011\uffef\034\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\050\uffef\051" +
    "\uffef\052\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\uffef\062\uffef\064\uffef\065\uffef\066\uffef\001\002\000" +
    "\016\007\uffca\013\uffca\031\104\032\uffca\040\uffca\063\uffca" +
    "\001\002\000\030\004\071\006\067\014\044\020\046\033" +
    "\053\034\057\035\062\036\052\037\051\046\073\047\066" +
    "\001\002\000\016\007\uffc8\013\uffc8\031\uffc8\032\uffc8\040" +
    "\uffc8\063\uffc8\001\002\000\006\007\107\032\101\001\002" +
    "\000\050\005\uffae\007\uffae\013\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\040\uffae\063" +
    "\uffae\001\002\000\030\004\uffc4\006\uffc4\014\uffc4\020\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\046\uffc4\047" +
    "\uffc4\001\002\000\032\007\uffc6\013\uffc6\023\120\024\117" +
    "\025\112\026\113\027\115\030\116\031\uffc6\032\uffc6\040" +
    "\uffc6\063\uffc6\001\002\000\026\004\071\006\067\014\044" +
    "\020\046\034\057\035\062\036\052\037\051\046\073\047" +
    "\066\001\002\000\026\004\071\006\067\014\044\020\046" +
    "\034\057\035\062\036\052\037\051\046\073\047\066\001" +
    "\002\000\032\007\uffc2\013\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\040\uffc2\063" +
    "\uffc2\001\002\000\026\004\071\006\067\014\044\020\046" +
    "\034\057\035\062\036\052\037\051\046\073\047\066\001" +
    "\002\000\026\004\071\006\067\014\044\020\046\034\057" +
    "\035\062\036\052\037\051\046\073\047\066\001\002\000" +
    "\026\004\071\006\067\014\044\020\046\034\057\035\062" +
    "\036\052\037\051\046\073\047\066\001\002\000\026\004" +
    "\071\006\067\014\044\020\046\034\057\035\062\036\052" +
    "\037\051\046\073\047\066\001\002\000\036\007\uffc0\013" +
    "\uffc0\017\123\020\124\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\040\uffc0\063\uffc0\001" +
    "\002\000\036\007\uffba\013\uffba\017\uffba\020\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\040\uffba\063\uffba\001\002\000\026\004\071\006\067" +
    "\014\044\020\046\034\057\035\062\036\052\037\051\046" +
    "\073\047\066\001\002\000\026\004\071\006\067\014\044" +
    "\020\046\034\057\035\062\036\052\037\051\046\073\047" +
    "\066\001\002\000\042\007\uffb7\013\uffb7\015\127\017\uffb7" +
    "\020\uffb7\021\130\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\040\uffb7\063\uffb7\001\002" +
    "\000\042\007\uffb6\013\uffb6\015\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\040\uffb6\063\uffb6\001\002\000\026\004" +
    "\071\006\067\014\044\020\046\034\057\035\062\036\052" +
    "\037\051\046\073\047\066\001\002\000\026\004\071\006" +
    "\067\014\044\020\046\034\057\035\062\036\052\037\051" +
    "\046\073\047\066\001\002\000\046\007\uffb4\013\uffb4\015" +
    "\uffb4\016\133\017\uffb4\020\uffb4\021\uffb4\022\134\023\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\040\uffb4\063\uffb4\001\002\000\046\007\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\040\uffb2\063\uffb2\001\002\000\026\004\071\006" +
    "\067\014\044\020\046\034\057\035\062\036\052\037\051" +
    "\046\073\047\066\001\002\000\026\004\071\006\067\014" +
    "\044\020\046\034\057\035\062\036\052\037\051\046\073" +
    "\047\066\001\002\000\046\007\uffb0\013\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\040" +
    "\uffb0\063\uffb0\001\002\000\046\007\uffaf\013\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\040\uffaf\063\uffaf\001\002\000\046\007\uffb3\013\uffb3\015" +
    "\uffb3\016\133\017\uffb3\020\uffb3\021\uffb3\022\134\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\040\uffb3\063\uffb3\001\002\000\042\007\uffb8\013\uffb8" +
    "\015\127\017\uffb8\020\uffb8\021\130\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\040\uffb8" +
    "\063\uffb8\001\002\000\036\007\uffbf\013\uffbf\017\123\020" +
    "\124\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\040\uffbf\063\uffbf\001\002\000\036\007" +
    "\uffbb\013\uffbb\017\123\020\124\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\040\uffbb\063" +
    "\uffbb\001\002\000\036\007\uffbc\013\uffbc\017\123\020\124" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\040\uffbc\063\uffbc\001\002\000\036\007\uffbd" +
    "\013\uffbd\017\123\020\124\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\040\uffbd\063\uffbd" +
    "\001\002\000\036\007\uffbe\013\uffbe\017\123\020\124\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\040\uffbe\063\uffbe\001\002\000\032\004\071\006" +
    "\067\007\151\014\044\020\046\033\053\034\057\035\062" +
    "\036\052\037\051\046\073\047\066\001\002\000\006\007" +
    "\154\013\153\001\002\000\010\007\uffe3\013\uffe3\032\101" +
    "\001\002\000\050\005\uffe5\007\uffe5\013\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\040" +
    "\uffe5\063\uffe5\001\002\000\050\005\uffa1\007\uffa1\013\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\040\uffa1\063\uffa1\001\002\000\030\004\071\006" +
    "\067\014\044\020\046\033\053\034\057\035\062\036\052" +
    "\037\051\046\073\047\066\001\002\000\050\005\uffe6\007" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\040\uffe6\063\uffe6\001\002\000\010" +
    "\007\uffe4\013\uffe4\032\101\001\002\000\050\005\uffac\007" +
    "\uffac\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\040\uffac\063\uffac\001\002\000\044" +
    "\034\027\041\015\042\036\043\023\044\040\045\026\050" +
    "\033\051\017\052\037\054\013\055\016\056\041\057\012" +
    "\060\005\064\034\065\004\066\043\001\002\000\046\011" +
    "\162\034\027\041\015\042\036\043\023\044\040\045\026" +
    "\050\033\051\017\052\037\054\013\055\016\056\041\057" +
    "\012\060\005\064\034\065\004\066\043\001\002\000\054" +
    "\002\000\011\000\034\000\041\000\042\000\043\000\044" +
    "\000\045\000\050\000\051\000\052\000\054\000\055\000" +
    "\056\000\057\000\060\000\061\000\062\000\064\000\065" +
    "\000\066\000\001\002\000\004\054\163\001\002\000\004" +
    "\006\164\001\002\000\030\004\071\006\067\014\044\020" +
    "\046\033\053\034\057\035\062\036\052\037\051\046\073" +
    "\047\066\001\002\000\006\007\166\032\101\001\002\000" +
    "\004\040\167\001\002\000\054\002\uffe8\011\uffe8\034\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\062\uffe8\064\uffe8\065\uffe8\066\uffe8\001\002\000" +
    "\030\004\071\006\067\014\044\020\046\033\053\034\057" +
    "\035\062\036\052\037\051\046\073\047\066\001\002\000" +
    "\006\007\172\032\101\001\002\000\004\010\173\001\002" +
    "\000\044\034\027\041\015\042\036\043\023\044\040\045" +
    "\026\050\033\051\017\052\037\054\013\055\016\056\041" +
    "\057\012\060\005\064\034\065\004\066\043\001\002\000" +
    "\046\011\176\034\027\041\015\042\036\043\023\044\040" +
    "\045\026\050\033\051\017\052\037\054\013\055\016\056" +
    "\041\057\012\060\005\064\034\065\004\066\043\001\002" +
    "\000\054\002\uffdc\011\uffdc\034\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\050\uffdc\051\uffdc\052\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\064" +
    "\uffdc\065\uffdc\066\uffdc\001\002\000\056\002\uffda\011\uffda" +
    "\034\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\177\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\064\uffda\065\uffda\066" +
    "\uffda\001\002\000\006\010\201\052\037\001\002\000\054" +
    "\002\uffd8\011\uffd8\034\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\050\uffd8\051\uffd8\052\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\064\uffd8\065" +
    "\uffd8\066\uffd8\001\002\000\044\034\027\041\015\042\036" +
    "\043\023\044\040\045\026\050\033\051\017\052\037\054" +
    "\013\055\016\056\041\057\012\060\005\064\034\065\004" +
    "\066\043\001\002\000\054\002\uffdb\011\uffdb\034\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\064\uffdb\065\uffdb\066\uffdb\001\002\000\046" +
    "\011\204\034\027\041\015\042\036\043\023\044\040\045" +
    "\026\050\033\051\017\052\037\054\013\055\016\056\041" +
    "\057\012\060\005\064\034\065\004\066\043\001\002\000" +
    "\054\002\uffd9\011\uffd9\034\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\001\002\000\054\002\ufff2\011\ufff2\034" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\064\ufff2\065\ufff2\066\ufff2\001\002" +
    "\000\010\006\211\012\210\040\212\001\002\000\100\002" +
    "\uffd3\004\uffd3\006\uffd3\011\uffd3\014\uffd3\020\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3\001\002\000\030" +
    "\004\071\006\067\014\044\020\046\033\053\034\057\035" +
    "\062\036\052\037\051\046\073\047\066\001\002\000\020" +
    "\007\215\041\015\042\036\043\023\044\040\045\026\050" +
    "\033\001\002\000\100\002\uffd1\004\uffd1\006\uffd1\011\uffd1" +
    "\014\uffd1\020\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\050\uffd1\051\uffd1\052\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\001\002\000\004\034\231\001\002\000\054\002" +
    "\uffe2\011\uffe2\034\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\050\uffe2\051\uffe2\052\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\001\002\000\004\010\226\001\002\000\006\007" +
    "\220\013\217\001\002\000\016\041\015\042\036\043\023" +
    "\044\040\045\026\050\033\001\002\000\004\010\221\001" +
    "\002\000\044\034\027\041\015\042\036\043\023\044\040" +
    "\045\026\050\033\051\017\052\037\054\013\055\016\056" +
    "\041\057\012\060\005\064\034\065\004\066\043\001\002" +
    "\000\046\011\223\034\027\041\015\042\036\043\023\044" +
    "\040\045\026\050\033\051\017\052\037\054\013\055\016" +
    "\056\041\057\012\060\005\064\034\065\004\066\043\001" +
    "\002\000\054\002\uffe0\011\uffe0\034\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\050\uffe0\051\uffe0\052\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\064\uffe0\065\uffe0\066\uffe0\001\002\000\004\034\225\001" +
    "\002\000\006\007\uffdf\013\uffdf\001\002\000\044\034\027" +
    "\041\015\042\036\043\023\044\040\045\026\050\033\051" +
    "\017\052\037\054\013\055\016\056\041\057\012\060\005" +
    "\064\034\065\004\066\043\001\002\000\046\011\230\034" +
    "\027\041\015\042\036\043\023\044\040\045\026\050\033" +
    "\051\017\052\037\054\013\055\016\056\041\057\012\060" +
    "\005\064\034\065\004\066\043\001\002\000\054\002\uffe1" +
    "\011\uffe1\034\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\050\uffe1\051\uffe1\052\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\064\uffe1\065\uffe1\066" +
    "\uffe1\001\002\000\006\007\uffde\013\uffde\001\002\000\006" +
    "\032\101\040\233\001\002\000\100\002\uffd2\004\uffd2\006" +
    "\uffd2\011\uffd2\014\uffd2\020\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\001\002\000\004\017\241\001\002" +
    "\000\030\004\071\006\067\014\044\020\046\033\053\034" +
    "\057\035\062\036\052\037\051\046\073\047\066\001\002" +
    "\000\004\020\237\001\002\000\006\007\uffd4\040\uffd4\001" +
    "\002\000\010\007\uffd6\032\101\040\uffd6\001\002\000\006" +
    "\007\uffd5\040\uffd5\001\002\000\054\002\ufffd\011\ufffd\034" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\064\ufffd\065\ufffd\066\ufffd\001\002" +
    "\000\030\004\071\006\067\014\044\020\046\033\053\034" +
    "\057\035\062\036\052\037\051\046\073\047\066\001\002" +
    "\000\006\007\245\032\101\001\002\000\004\040\246\001" +
    "\002\000\054\002\uffd7\011\uffd7\034\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\050\uffd7\051\uffd7\052\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\001\002\000\004\006\250\001" +
    "\002\000\032\004\071\006\067\007\151\014\044\020\046" +
    "\033\053\034\057\035\062\036\052\037\051\046\073\047" +
    "\066\001\002\000\004\040\252\001\002\000\054\002\uffe7" +
    "\011\uffe7\034\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\001\002\000\030\004\071\006\067\014\044\020\046" +
    "\033\053\034\057\035\062\036\052\037\051\046\073\047" +
    "\066\001\002\000\006\007\255\032\101\001\002\000\004" +
    "\010\256\001\002\000\044\034\027\041\015\042\036\043" +
    "\023\044\040\045\026\050\033\051\017\052\037\054\013" +
    "\055\016\056\041\057\012\060\005\064\034\065\004\066" +
    "\043\001\002\000\046\011\260\034\027\041\015\042\036" +
    "\043\023\044\040\045\026\050\033\051\017\052\037\054" +
    "\013\055\016\056\041\057\012\060\005\064\034\065\004" +
    "\066\043\001\002\000\054\002\uffdd\011\uffdd\034\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\064\uffdd\065\uffdd\066\uffdd\001\002\000\016" +
    "\041\015\042\036\043\023\044\040\045\026\050\033\001" +
    "\002\000\004\034\274\001\002\000\030\004\071\006\067" +
    "\014\044\020\046\033\053\034\057\035\062\036\052\037" +
    "\051\046\073\047\066\001\002\000\006\032\101\040\265" +
    "\001\002\000\004\034\266\001\002\000\010\012\235\017" +
    "\234\020\236\001\002\000\004\007\270\001\002\000\004" +
    "\010\271\001\002\000\044\034\027\041\015\042\036\043" +
    "\023\044\040\045\026\050\033\051\017\052\037\054\013" +
    "\055\016\056\041\057\012\060\005\064\034\065\004\066" +
    "\043\001\002\000\046\011\273\034\027\041\015\042\036" +
    "\043\023\044\040\045\026\050\033\051\017\052\037\054" +
    "\013\055\016\056\041\057\012\060\005\064\034\065\004" +
    "\066\043\001\002\000\054\002\uffe9\011\uffe9\034\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\uffe9\064\uffe9\065\uffe9\066\uffe9\001\002\000\006" +
    "\012\210\040\212\001\002\000\054\002\ufff7\011\ufff7\034" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\064\ufff7\065\ufff7\066\ufff7\001\002" +
    "\000\004\002\001\001\002\000\004\034\300\001\002\000" +
    "\004\007\301\001\002\000\004\010\302\001\002\000\006" +
    "\061\306\062\304\001\002\000\010\011\uffec\061\uffec\062" +
    "\uffec\001\002\000\004\063\314\001\002\000\010\011\313" +
    "\061\306\062\304\001\002\000\030\004\071\006\067\014" +
    "\044\020\046\033\053\034\057\035\062\036\052\037\051" +
    "\046\073\047\066\001\002\000\006\032\101\063\310\001" +
    "\002\000\044\034\027\041\015\042\036\043\023\044\040" +
    "\045\026\050\033\051\017\052\037\054\013\055\016\056" +
    "\041\057\012\060\005\064\034\065\004\066\043\001\002" +
    "\000\052\011\uffeb\034\027\041\015\042\036\043\023\044" +
    "\040\045\026\050\033\051\017\052\037\054\013\055\016" +
    "\056\041\057\012\060\005\061\uffeb\062\uffeb\064\034\065" +
    "\004\066\043\001\002\000\010\011\uffed\061\uffed\062\uffed" +
    "\001\002\000\054\002\uffee\011\uffee\034\uffee\041\uffee\042" +
    "\uffee\043\uffee\044\uffee\045\uffee\050\uffee\051\uffee\052\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\064\uffee\065\uffee\066\uffee\001\002\000\044\034\027" +
    "\041\015\042\036\043\023\044\040\045\026\050\033\051" +
    "\017\052\037\054\013\055\016\056\041\057\012\060\005" +
    "\064\034\065\004\066\043\001\002\000\052\011\uffea\034" +
    "\027\041\015\042\036\043\023\044\040\045\026\050\033" +
    "\051\017\052\037\054\013\055\016\056\041\057\012\060" +
    "\005\061\uffea\062\uffea\064\034\065\004\066\043\001\002" +
    "\000\054\002\ufff3\011\ufff3\034\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\050\ufff3\051\ufff3\052\ufff3\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\040\002\007\003\020\004\024\005\034\007" +
    "\027\030\005\031\021\034\017\035\030\040\006\043\010" +
    "\044\013\045\041\046\031\051\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\160\004\024\005\034\007\027\030\005\031" +
    "\021\034\017\035\030\040\006\043\010\044\013\045\041" +
    "\046\031\051\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\010\067\011\047\012" +
    "\044\013\063\014\062\016\054\020\060\021\057\024\055" +
    "\025\053\026\064\043\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\024\155\025\053\026\064\043\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\131\001\001\000\004\022\125\001\001" +
    "\000\002\001\001\000\004\015\113\001\001\000\022\014" +
    "\110\016\054\020\060\021\057\024\055\025\053\026\064" +
    "\043\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\105\011\047\012\044\013\063\014\062\016\054" +
    "\020\060\021\057\024\055\025\053\026\064\043\046\001" +
    "\001\000\002\001\001\000\012\025\053\026\074\027\073" +
    "\043\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\053\026\077" +
    "\043\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\102\012\044\013\063\014\062\016\054\020\060" +
    "\021\057\024\055\025\053\026\064\043\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\104\013\063" +
    "\014\062\016\054\020\060\021\057\024\055\025\053\026" +
    "\064\043\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\113\001" +
    "\001\000\020\016\144\020\060\021\057\024\055\025\053" +
    "\026\064\043\046\001\001\000\020\016\143\020\060\021" +
    "\057\024\055\025\053\026\064\043\046\001\001\000\002" +
    "\001\001\000\020\016\142\020\060\021\057\024\055\025" +
    "\053\026\064\043\046\001\001\000\020\016\141\020\060" +
    "\021\057\024\055\025\053\026\064\043\046\001\001\000" +
    "\020\016\140\020\060\021\057\024\055\025\053\026\064" +
    "\043\046\001\001\000\020\016\120\020\060\021\057\024" +
    "\055\025\053\026\064\043\046\001\001\000\004\017\121" +
    "\001\001\000\002\001\001\000\016\020\137\021\057\024" +
    "\055\025\053\026\064\043\046\001\001\000\016\020\124" +
    "\021\057\024\055\025\053\026\064\043\046\001\001\000" +
    "\004\022\125\001\001\000\002\001\001\000\014\021\136" +
    "\024\055\025\053\026\064\043\046\001\001\000\014\021" +
    "\130\024\055\025\053\026\064\043\046\001\001\000\004" +
    "\023\131\001\001\000\002\001\001\000\012\024\135\025" +
    "\053\026\064\043\046\001\001\000\012\024\134\025\053" +
    "\026\064\043\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\131\001\001\000\004\022\125\001\001" +
    "\000\004\017\121\001\001\000\004\017\121\001\001\000" +
    "\004\017\121\001\001\000\004\017\121\001\001\000\004" +
    "\017\121\001\001\000\036\010\147\011\047\012\044\013" +
    "\063\014\062\016\054\020\060\021\057\024\055\025\053" +
    "\026\064\041\151\042\146\043\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\154\011\047\012\044\013\063\014\062\016" +
    "\054\020\060\021\057\024\055\025\053\026\064\043\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\002\157\003\020\004\024\005\034\007\027" +
    "\030\005\031\021\034\017\035\030\040\006\043\010\044" +
    "\013\045\041\046\031\051\023\001\001\000\036\003\160" +
    "\004\024\005\034\007\027\030\005\031\021\034\017\035" +
    "\030\040\006\043\010\044\013\045\041\046\031\051\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\164\011\047\012\044\013\063\014\062" +
    "\016\054\020\060\021\057\024\055\025\053\026\064\043" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\010\170\011\047\012\044\013\063\014" +
    "\062\016\054\020\060\021\057\024\055\025\053\026\064" +
    "\043\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\002\173\003\020\004\024\005\034\007\027\030\005" +
    "\031\021\034\017\035\030\040\006\043\010\044\013\045" +
    "\041\046\031\051\023\001\001\000\040\003\160\004\024" +
    "\005\034\007\027\030\005\031\021\032\174\034\017\035" +
    "\030\040\006\043\010\044\013\045\041\046\031\051\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\177\033\201\001\001\000\002\001\001\000\040\002\202" +
    "\003\020\004\024\005\034\007\027\030\005\031\021\034" +
    "\017\035\030\040\006\043\010\044\013\045\041\046\031" +
    "\051\023\001\001\000\002\001\001\000\036\003\160\004" +
    "\024\005\034\007\027\030\005\031\021\034\017\035\030" +
    "\040\006\043\010\044\013\045\041\046\031\051\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\206" +
    "\001\001\000\002\001\001\000\032\010\231\011\047\012" +
    "\044\013\063\014\062\016\054\020\060\021\057\024\055" +
    "\025\053\026\064\043\046\001\001\000\010\007\212\036" +
    "\213\037\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\223\001\001\000\002\001\001\000\040\002\221" +
    "\003\020\004\024\005\034\007\027\030\005\031\021\034" +
    "\017\035\030\040\006\043\010\044\013\045\041\046\031" +
    "\051\023\001\001\000\036\003\160\004\024\005\034\007" +
    "\027\030\005\031\021\034\017\035\030\040\006\043\010" +
    "\044\013\045\041\046\031\051\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\226" +
    "\003\020\004\024\005\034\007\027\030\005\031\021\034" +
    "\017\035\030\040\006\043\010\044\013\045\041\046\031" +
    "\051\023\001\001\000\036\003\160\004\024\005\034\007" +
    "\027\030\005\031\021\034\017\035\030\040\006\043\010" +
    "\044\013\045\041\046\031\051\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\237\011\047\012\044\013" +
    "\063\014\062\016\054\020\060\021\057\024\055\025\053" +
    "\026\064\043\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\243\011\047\012\044\013\063\014\062\016" +
    "\054\020\060\021\057\024\055\025\053\026\064\043\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\010\147\011\047\012\044" +
    "\013\063\014\062\016\054\020\060\021\057\024\055\025" +
    "\053\026\064\041\250\042\146\043\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\010\253\011\047\012" +
    "\044\013\063\014\062\016\054\020\060\021\057\024\055" +
    "\025\053\026\064\043\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\256\003\020\004\024\005\034" +
    "\007\027\030\005\031\021\034\017\035\030\040\006\043" +
    "\010\044\013\045\041\046\031\051\023\001\001\000\036" +
    "\003\160\004\024\005\034\007\027\030\005\031\021\034" +
    "\017\035\030\040\006\043\010\044\013\045\041\046\031" +
    "\051\023\001\001\000\002\001\001\000\006\005\262\007" +
    "\261\001\001\000\002\001\001\000\032\010\263\011\047" +
    "\012\044\013\063\014\062\016\054\020\060\021\057\024" +
    "\055\025\053\026\064\043\046\001\001\000\002\001\001" +
    "\000\004\004\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\271\003\020\004\024" +
    "\005\034\007\027\030\005\031\021\034\017\035\030\040" +
    "\006\043\010\044\013\045\041\046\031\051\023\001\001" +
    "\000\036\003\160\004\024\005\034\007\027\030\005\031" +
    "\021\034\017\035\030\040\006\043\010\044\013\045\041" +
    "\046\031\051\023\001\001\000\002\001\001\000\004\006" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\304\050\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\311\001\001\000\032\010\306\011\047\012" +
    "\044\013\063\014\062\016\054\020\060\021\057\024\055" +
    "\025\053\026\064\043\046\001\001\000\002\001\001\000" +
    "\040\002\310\003\020\004\024\005\034\007\027\030\005" +
    "\031\021\034\017\035\030\040\006\043\010\044\013\045" +
    "\041\046\031\051\023\001\001\000\036\003\160\004\024" +
    "\005\034\007\027\030\005\031\021\034\017\035\030\040" +
    "\006\043\010\044\013\045\041\046\031\051\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\002\314\003" +
    "\020\004\024\005\034\007\027\030\005\031\021\034\017" +
    "\035\030\040\006\043\010\044\013\045\041\046\031\051" +
    "\023\001\001\000\036\003\160\004\024\005\034\007\027" +
    "\030\005\031\021\034\017\035\030\040\006\043\010\044" +
    "\013\045\041\046\031\051\023\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        arbol resultado;
        public ArrayList<fallos> listaErrores = new ArrayList();

        public arbol getArbol(){
                return resultado;
        }

        public ArrayList<fallos> getErrores(){
                return listaErrores;
        }

        ArrayList<tablaJson> tablaS = new ArrayList();

        public ArrayList getTablaS(){
                return tablaS;
        }

        public void syntax_error(Symbol s){
	        System.out.println("Sintax error: " +s.value + " en la columna " + s.right+ " en la linea " + s.left);
                listaErrores.add(new fallos(String.valueOf(s.value),"Error Sintax",s.left,s.right));
        }

        public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
	        System.out.println("Sintax error: " +s.value + " en la columna " + s.right+" en la linea " + s.left);
                listaErrores.add(new fallos(String.valueOf(s.value),"Error Lexico",s.left,s.right));
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= instrucciones instruccion 
            {
              arbol RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol a1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a1);
                        instrucciones.añadirHijo(a2);
                RESULT=instrucciones;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a);
                RESULT=instrucciones;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= declaracion1 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion PUNTOCOMA 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                        instruccion.añadirHijo(new arbol(pc));
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= sImprimir 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= sIf 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= senWhile 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= lf1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= llamadaFM 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= callFunc PUNTOCOMA 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                instruccion.añadirHijo(new arbol(puntocoma));
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= senDoWhile 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= senFor 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= senSwitch 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RCONTINUE PUNTOCOMA 
            {
              arbol RESULT =null;
		int continue1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int continue1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String continue1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(new arbol(continue1));
                instruccion.añadirHijo(new arbol(pc));
                
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= RBREAK PUNTOCOMA 
            {
              arbol RESULT =null;
		int break1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int break1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String break1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(new arbol(break1));
                instruccion.añadirHijo(new arbol(pc));
                
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= senReturn 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // senReturn ::= RRETURN PUNTOCOMA 
            {
              arbol RESULT =null;
		int return1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int return1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String return1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol senReturn = new arbol("senReturn");
                senReturn.añadirHijo(new arbol(return1));
                senReturn.añadirHijo(new arbol(pc));
                
                RESULT=senReturn;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senReturn",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // senReturn ::= RRETURN expLog PUNTOCOMA 
            {
              arbol RESULT =null;
		int return1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int return1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String return1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol senReturn = new arbol("senReturn");
                senReturn.añadirHijo(new arbol(return1));
                senReturn.añadirHijo(v1);
                senReturn.añadirHijo(new arbol(pc));
                
                RESULT=senReturn;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senReturn",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // senSwitch ::= RSWITCH PAR_IZQ ID PAR_DER LL_IZQ listCase LL_DER 
            {
              arbol RESULT =null;
		int switch1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int switch1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String switch1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaCasosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaCasosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol listaCasos = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol senSwitch = new arbol("senSwitch");
               
                senSwitch.añadirHijo(new arbol(switch1));
                senSwitch.añadirHijo(new arbol(parI));
                senSwitch.añadirHijo(new arbol(id));
                senSwitch.añadirHijo(new arbol(parD));
                //dec1.setAct(false);
                senSwitch.añadirHijo(new arbol(llI));

                senSwitch.añadirHijo(listaCasos);
                senSwitch.añadirHijo(new arbol(llD));
                
                
             
                RESULT= senSwitch;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senSwitch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listCase ::= listCase listCase1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol listCase = new arbol("listCase");
                        
                listCase.añadirHijo(v1);
                listCase.añadirHijo(v2);
                
                RESULT= listCase;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCase",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listCase ::= listCase1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol listCase = new arbol("listCase");            
            
                listCase.añadirHijo(v1);
             
                RESULT= listCase;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCase",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listCase1 ::= RCASE expLog DOSPUNTOS instrucciones 
            {
              arbol RESULT =null;
		int caso1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int caso1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String caso1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dosPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dosPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dosP = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol listCase1 = new arbol("listCase1");
               
                listCase1.añadirHijo(new arbol(caso1));
                
                
               

                listCase1.añadirHijo(v1);
                listCase1.añadirHijo(new arbol(dosP));
         
                
             
                ins1.setAct(false);
                listCase1.añadirHijo(ins1);
                

                RESULT= listCase1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCase1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listCase1 ::= RDEFAULT DOSPUNTOS instrucciones 
            {
              arbol RESULT =null;
		int default1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int default1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String default1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dosPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dosPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dosP = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol listCase1 = new arbol("listCase1");
               
                listCase1.añadirHijo(new arbol(default1));
                
                
               

             
                listCase1.añadirHijo(new arbol(dosP));
         
                
             
                ins1.setAct(false);
                listCase1.añadirHijo(ins1);
                

                RESULT= listCase1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listCase1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // senFor ::= RFOR PAR_IZQ declaracion1 expLog PUNTOCOMA asignacion PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int for1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int for1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String for1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		arbol dec1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int asig1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asig1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol asig1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol senFor = new arbol("senFor");
               
                senFor.añadirHijo(new arbol(for1));
                senFor.añadirHijo(new arbol(parI));
                
                //dec1.setAct(false);
                senFor.añadirHijo(dec1);

                senFor.añadirHijo(v1);
                senFor.añadirHijo(new arbol(pc));
                asig1.setAct(false);
                senFor.añadirHijo(asig1);
                
                senFor.añadirHijo(new arbol(parD));

                senFor.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senFor.añadirHijo(ins1);
                senFor.añadirHijo(new arbol(llD));

                RESULT= senFor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senFor",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // senDoWhile ::= RDO LL_IZQ instrucciones LL_DER RWHILE PAR_IZQ expLog PAR_DER PUNTOCOMA 
            {
              arbol RESULT =null;
		int do1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int do1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String do1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int while1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int while1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String while1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol senDoWhile = new arbol("senDoWhile");
               
                senDoWhile.añadirHijo(new arbol(do1));
                senDoWhile.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senDoWhile.añadirHijo(ins1);
                senDoWhile.añadirHijo(new arbol(llD));

                senDoWhile.añadirHijo(new arbol(while1));

                senDoWhile.añadirHijo(new arbol(parI));
                senDoWhile.añadirHijo(v1);
                senDoWhile.añadirHijo(new arbol(parD));
                senDoWhile.añadirHijo(new arbol(puntocoma));
                

                RESULT= senDoWhile;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senDoWhile",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // llamadaFM ::= REJECUTAR ID PAR_IZQ lenviarParam PUNTOCOMA 
            {
              arbol RESULT =null;
		int ejecutarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ejecutarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ejecutar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol llamadaFM = new arbol("llamadaFM");

                llamadaFM.añadirHijo(new arbol(ejecutar));
                llamadaFM.añadirHijo(new arbol(id));
                llamadaFM.añadirHijo(new arbol(parI));
                llamadaFM.añadirHijo(parametros);
                llamadaFM.añadirHijo(new arbol(puntocoma));
                RESULT=llamadaFM;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lenviarParam ::= lenviarParam1 PAR_DER 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol lenviarParam = new arbol("lenviarParam");
                
                lenviarParam.añadirHijo(v1);
                lenviarParam.añadirHijo(new arbol(parD));
               
                
                RESULT=lenviarParam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lenviarParam ::= PAR_DER 
            {
              arbol RESULT =null;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol lenviarParam = new arbol("lenviarParam");
                
                
                lenviarParam.añadirHijo(new arbol(parD));
                
                
                RESULT=lenviarParam;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lenviarParam1 ::= lenviarParam1 COMA expLog 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lenviarParam1 = new arbol("lenviarParam1");

                lenviarParam1.añadirHijo(parametros);
                lenviarParam1.añadirHijo(new arbol(coma));
                
                lenviarParam1.añadirHijo(v1);
               

                RESULT= lenviarParam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lenviarParam1 ::= expLog 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lenviarParam1 = new arbol("lenviarParam1");

                
                lenviarParam1.añadirHijo(v1);
               

                RESULT= lenviarParam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lf1 ::= varTipo ID PAR_IZQ lparam 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lf1 = new arbol("lf1");
               
                lf1.añadirHijo(tipo);
                lf1.añadirHijo(new arbol(id));
                lf1.añadirHijo(new arbol(parI));
                
                lf1.añadirHijo(parametros);

                RESULT= lf1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lf1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lparam ::= PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam = new arbol("lparam");
               
                lparam.añadirHijo(new arbol(parD));
                lparam.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                lparam.añadirHijo(ins1);
                lparam.añadirHijo(new arbol(llD));
                
                
                

                RESULT= lparam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lparam ::= lparam1 PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam = new arbol("lparam");

                lparam.añadirHijo(parametros);
                lparam.añadirHijo(new arbol(parD));
                lparam.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                lparam.añadirHijo(ins1);
                lparam.añadirHijo(new arbol(llD));
                
                
                

                RESULT= lparam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lparam1 ::= lparam1 COMA varTipo ID 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam1 = new arbol("lparam1");

                lparam1.añadirHijo(parametros);
                lparam1.añadirHijo(new arbol(coma));
                lparam1.añadirHijo(tipo);
                lparam1.añadirHijo(new arbol(id));
               

                RESULT= lparam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lparam1 ::= varTipo ID 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam1 = new arbol("lparam1");

               
                lparam1.añadirHijo(tipo);
                lparam1.añadirHijo(new arbol(id));
               

                RESULT= lparam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // senWhile ::= RWHILE PAR_IZQ expLog PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int while1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int while1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String while1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol senWhile = new arbol("senWhile");
               
                senWhile.añadirHijo(new arbol(while1));
                senWhile.añadirHijo(new arbol(parI));
                senWhile.añadirHijo(v1);
                senWhile.añadirHijo(new arbol(parD));
                senWhile.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senWhile.añadirHijo(ins1);
                senWhile.añadirHijo(new arbol(llD));

                RESULT= senWhile;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sIf ::= RIF PAR_IZQ expLog PAR_DER LL_IZQ instrucciones sIf2 
            {
              arbol RESULT =null;
		int if1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String if1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int if2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol if2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sIf = new arbol("sIf");
               
                sIf.añadirHijo(new arbol(if1));
                sIf.añadirHijo(new arbol(parI));
                sIf.añadirHijo(v1);
                sIf.añadirHijo(new arbol(parD));
                sIf.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                sIf.añadirHijo(ins1);
                sIf.añadirHijo(if2);

                RESULT= sIf;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sIf2 ::= LL_DER RELSE elsePrima 
            {
              arbol RESULT =null;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String else1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sIf2 = new arbol("sIf2");
               
                sIf2.añadirHijo(new arbol(llD));
                
                sIf2.añadirHijo(new arbol(else1));
                sIf2.añadirHijo(v1);
               


                RESULT= sIf2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sIf2 ::= LL_DER 
            {
              arbol RESULT =null;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol sIf2 = new arbol("sIf2");
                sIf2.añadirHijo(new arbol(llD));
                RESULT=sIf2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elsePrima ::= LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol elsePrima = new arbol("elsePrima");
               
                elsePrima.añadirHijo(new arbol(llI));
                v1.setAct(false);
                elsePrima.añadirHijo(v1);
                elsePrima.añadirHijo(new arbol(llD));
               


                RESULT= elsePrima;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePrima",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elsePrima ::= sIf 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol elsePrima = new arbol("elsePrima");
                elsePrima.añadirHijo(v1);
                RESULT=elsePrima;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePrima",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sImprimir ::= RIMPRIMIR PAR_IZQ expLog PAR_DER PUNTOCOMA 
            {
              arbol RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sImprimir = new arbol("sImprimir");
                sImprimir.añadirHijo(new arbol(imprimir));
                sImprimir.añadirHijo(new arbol(parI));
                sImprimir.añadirHijo(v1);
                sImprimir.añadirHijo(new arbol(parD));
                sImprimir.añadirHijo(new arbol(puntocoma));


                RESULT= sImprimir;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sImprimir",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= ID IGUAL expLog 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String igual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(igual));
                                                asignacion.añadirHijo(v1);
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= ID MAS MAS 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mas1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mas1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mas1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mas2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mas2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mas2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(mas1));
                                                asignacion.añadirHijo(new arbol(mas2));
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignacion ::= ID MENOS MENOS 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int menos1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menos1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int menos2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menos2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String menos2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(menos1));
                                                asignacion.añadirHijo(new arbol(menos2));
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion1 ::= varTipo ID declaracion2 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol dec2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion1 = new arbol("declaracion1");
                        
                       
                                                declaracion1.añadirHijo(tipo);
                                                declaracion1.añadirHijo(new arbol(id));
                                                declaracion1.añadirHijo(dec2);
                                                
                        
                                                RESULT=declaracion1;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion2 ::= IGUAL expLog PUNTOCOMA 
            {
              arbol RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String igual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion2 = new arbol("declaracion2");
                        
                       
                                                declaracion2.añadirHijo(new arbol(igual));
                                                declaracion2.añadirHijo(v1);
                                                declaracion2.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=declaracion2;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion2 ::= PUNTOCOMA 
            {
              arbol RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion2 = new arbol("declaracion2");
                        declaracion2.añadirHijo(new arbol(pc));
                RESULT=declaracion2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // varTipo ::= RSTRING 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // varTipo ::= RDOUBLE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // varTipo ::= RINT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varTipo ::= RCHAR 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varTipo ::= RBOOL 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // varTipo ::= RVOID 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expLog ::= expLog OR expLog1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog = new arbol("expLog");
                        
                       
                        expLog.añadirHijo(v1);
                        expLog.añadirHijo(new arbol(or));
                        expLog.añadirHijo(v2);
                        
                        RESULT=expLog;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expLog ::= expLog1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog = new arbol("expLog");
                        
        expLog.añadirHijo(v1);
                        
        RESULT=expLog;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expLog1 ::= expLog1 AND expLog2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String and = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog1 = new arbol("expLog1");
                        
                       
                        expLog1.añadirHijo(v1);
                        expLog1.añadirHijo(new arbol(and));
                        expLog1.añadirHijo(v2);
                        
                        RESULT=expLog1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expLog1 ::= expLog2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog1 = new arbol("expLog1");
                        
        expLog1.añadirHijo(v1);
                        
        RESULT=expLog1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expLog2 ::= expNot expRel 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog2 = new arbol("expLog2");
                        
                       
                        expLog2.añadirHijo(v1);
                        expLog2.añadirHijo(v2);
                        
                        RESULT=expLog2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expLog2 ::= expRel 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog2 = new arbol("expLog2");
                        
        expLog2.añadirHijo(v1);
                        
        RESULT=expLog2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expNot ::= expNot NOT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expNot = new arbol("expNot");
                        
                       
                        expNot.añadirHijo(v1);
                        expNot.añadirHijo(new arbol(not));
                        
                        RESULT=expNot;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNot",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expNot ::= NOT 
            {
              arbol RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expNot = new arbol("expNot");
                        
        expNot.añadirHijo(new arbol(not));
                        
        RESULT=expNot;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNot",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expRel ::= expRel expRel1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel = new arbol("expRel");
                        
                       
                        expRel.añadirHijo(v1);
                        expRel.añadirHijo(v2);
                        
                        RESULT=expRel;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expRel ::= expArit 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel = new arbol("expRel");
                        
                        expRel.añadirHijo(v1);
                        
                        RESULT=expRel;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expRel1 ::= MAYOR expArit 
            {
              arbol RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mayor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expRel1 ::= MENOR expArit 
            {
              arbol RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expRel1 ::= MAYORIGUAL expArit 
            {
              arbol RESULT =null;
		int mayorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mayorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mayorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expRel1 ::= MENORIGUAL expArit 
            {
              arbol RESULT =null;
		int menorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expRel1 ::= EQUIVALENTE expArit 
            {
              arbol RESULT =null;
		int equivalenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int equivalenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String equivalente = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(equivalente));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expRel1 ::= DISTINTO expArit 
            {
              arbol RESULT =null;
		int distintoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distintoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String distinto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(distinto));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expArit ::= expArit expArit2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        expArit.añadirHijo(v2);

                        RESULT=expArit;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expArit ::= expArit3 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        
                        RESULT=expArit;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expArit2 ::= MAS expArit3 
            {
              arbol RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(mas));
                        expArit2.añadirHijo(v1);
                        
                        RESULT=expArit2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expArit2 ::= MENOS expArit3 
            {
              arbol RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(menos));
                        expArit2.añadirHijo(v2);
                        
                        RESULT=expArit2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expArit3 ::= expArit3 expArit3Prima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        expArit3.añadirHijo(v2);
                        
                        RESULT=expArit3;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expArit3 ::= expArit4 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        RESULT=expArit3;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expArit3Prima ::= POR expArit4 
            {
              arbol RESULT =null;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String por = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(por));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3Prima",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expArit3Prima ::= POTENCIA expArit4 
            {
              arbol RESULT =null;
		int potencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int potenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String potencia = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(potencia));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3Prima",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expArit4 ::= expArit4 expArit4Prima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        expArit4.añadirHijo(v2);
                        
                        RESULT=expArit4;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expArit4 ::= expPrima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        RESULT=expArit4;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expArit4Prima ::= DIV expPrima 
            {
              arbol RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(div));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4Prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expArit4Prima ::= MODULO expPrima 
            {
              arbol RESULT =null;
		int moduloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moduloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String modulo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(modulo));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4Prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expPrima ::= PAR_IZQ expLog PAR_DER 
            {
              arbol RESULT =null;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expPrima = new arbol("expPrima");
                                        expPrima.añadirHijo(new arbol(parI));
                                        expPrima.añadirHijo(v1);
                                        expPrima.añadirHijo(new arbol(parD));
                                        RESULT=expPrima;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPrima",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expPrima ::= valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expPrima = new arbol("expPrima");
                        expPrima.añadirHijo(v1);
                RESULT=expPrima;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPrima",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor1 ::= MENOS expPrima 
            {
              arbol RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor1 = new arbol("valor1");
                                        valor1.añadirHijo(new arbol(menos));
                                        valor1.añadirHijo(v1);

                                        RESULT=valor1;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor1 ::= valor 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor1 = new arbol("valor1");
                        valor1.añadirHijo(v1);
                RESULT=valor1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor ::= STRING 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor ::= INT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor ::= DECIMAL 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor ::= ID 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valorId");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor ::= COR_IZQ datoArray COR_DER 
            {
              arbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= RTRUE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= RFALSE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor ::= TCHAR 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor ::= callFunc 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(v1);
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // callFunc ::= ID PAR_IZQ lenviarParam 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol callFunc = new arbol("callFunc");

               
                callFunc.añadirHijo(new arbol(id));
                callFunc.añadirHijo(new arbol(parI));
                callFunc.añadirHijo(parametros);
                RESULT=callFunc;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callFunc",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // datoArray ::= datoArray COMA valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v3 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                        datoArray.añadirHijo(new arbol(v2));
                        datoArray.añadirHijo(v3);
                RESULT=datoArray;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datoArray",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // datoArray ::= valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                RESULT=datoArray;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datoArray",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
