
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import structuras.tablaJson;
import structuras.arbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\031\011\000\002\032\005\000" +
    "\002\032\003\000\002\033\005\000\002\033\003\000\002" +
    "\030\007\000\002\004\006\000\002\005\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\011\005\000\002" +
    "\011\003\000\002\012\004\000\002\012\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\004\000\002\014\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\016\004\000\002\016\003\000\002\017\004\000\002\017" +
    "\004\000\002\020\004\000\002\020\003\000\002\022\004" +
    "\000\002\022\004\000\002\021\004\000\002\021\003\000" +
    "\002\023\004\000\002\023\004\000\002\024\005\000\002" +
    "\024\003\000\002\026\004\000\002\026\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\022\034\017\041\022\042\005\043\020\044" +
    "\021\045\004\050\012\051\013\001\002\000\004\034\uffec" +
    "\001\002\000\004\034\uffef\001\002\000\004\034\150\001" +
    "\002\000\026\002\ufffb\011\ufffb\034\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\050\ufffb\051\ufffb\001\002\000" +
    "\026\002\ufffc\011\ufffc\034\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\050\ufffc\051\ufffc\001\002\000\026\002" +
    "\ufffe\011\ufffe\034\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\050\ufffe\051\ufffe\001\002\000\004\006\144\001" +
    "\002\000\004\006\127\001\002\000\024\002\125\034\017" +
    "\041\022\042\005\043\020\044\021\045\004\050\012\051" +
    "\013\001\002\000\026\002\uffff\011\uffff\034\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\050\uffff\051\uffff\001" +
    "\002\000\026\002\ufffd\011\ufffd\034\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\050\ufffd\051\ufffd\001\002\000" +
    "\004\012\023\001\002\000\004\034\uffee\001\002\000\004" +
    "\034\uffed\001\002\000\004\034\ufff0\001\002\000\030\004" +
    "\050\006\046\014\024\020\026\033\032\034\036\035\041" +
    "\036\031\037\030\046\051\047\045\001\002\000\046\005" +
    "\uffc4\007\uffc4\013\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\040\uffc4\001\002\000\012" +
    "\007\uffe8\031\uffe8\032\uffe8\040\uffe8\001\002\000\026\004" +
    "\050\006\046\014\024\020\026\034\036\035\041\036\031" +
    "\037\030\046\051\047\045\001\002\000\012\007\uffea\031" +
    "\062\032\uffea\040\uffea\001\002\000\046\005\uffca\007\uffca" +
    "\013\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\040\uffca\001\002\000\046\005\uffc9\007" +
    "\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\040\uffc9\001\002\000\030\004\uffe4" +
    "\006\uffe4\014\uffe4\020\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\046\uffe4\047\uffe4\001\002\000\046\005\uffcc" +
    "\007\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\040\uffcc\001\002\000\032\007" +
    "\uffe2\017\101\020\102\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\040\uffe2\001\002\000" +
    "\042\007\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\040\uffd2\001\002\000\046\005\uffc8" +
    "\007\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\040\uffc8\001\002\000\042\007" +
    "\uffd6\015\uffd6\016\111\017\uffd6\020\uffd6\021\uffd6\022\112" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\040\uffd6\001\002\000\036\007\uffda\015\105" +
    "\017\uffda\020\uffda\021\106\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\040\uffda\001\002" +
    "\000\046\005\uffcb\007\uffcb\013\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\040\uffcb\001" +
    "\002\000\026\007\uffe6\023\076\024\075\025\070\026\071" +
    "\027\073\030\074\031\uffe6\032\uffe6\040\uffe6\001\002\000" +
    "\030\004\050\006\046\014\024\020\026\033\066\034\036" +
    "\035\041\036\031\037\030\046\051\047\045\001\002\000" +
    "\046\005\uffce\007\uffce\013\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\040\uffce\001\002" +
    "\000\046\005\uffc5\007\uffc5\013\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\040\uffc5\001" +
    "\002\000\030\004\050\006\046\014\024\020\026\033\032" +
    "\034\036\035\041\036\031\037\030\046\051\047\045\001" +
    "\002\000\006\032\060\040\057\001\002\000\024\004\050" +
    "\014\024\020\026\034\036\035\041\036\031\037\030\046" +
    "\051\047\045\001\002\000\046\005\uffc6\007\uffc6\013\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\040\uffc6\001\002\000\006\005\055\013\054\001" +
    "\002\000\006\005\uffc2\013\uffc2\001\002\000\024\004\050" +
    "\014\024\020\026\034\036\035\041\036\031\037\030\046" +
    "\051\047\045\001\002\000\046\005\uffc7\007\uffc7\013\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\040\uffc7\001\002\000\006\005\uffc3\013\uffc3\001" +
    "\002\000\026\002\ufff4\011\ufff4\034\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\050\ufff4\051\ufff4\001\002\000" +
    "\030\004\050\006\046\014\024\020\026\033\032\034\036" +
    "\035\041\036\031\037\030\046\051\047\045\001\002\000" +
    "\012\007\uffeb\031\062\032\uffeb\040\uffeb\001\002\000\030" +
    "\004\050\006\046\014\024\020\026\033\032\034\036\035" +
    "\041\036\031\037\030\046\051\047\045\001\002\000\012" +
    "\007\uffe9\031\uffe9\032\uffe9\040\uffe9\001\002\000\006\007" +
    "\065\032\060\001\002\000\046\005\uffcf\007\uffcf\013\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\040\uffcf\001\002\000\030\004\uffe5\006\uffe5\014" +
    "\uffe5\020\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\046\uffe5\047\uffe5\001\002\000\026\007\uffe7\023\076\024" +
    "\075\025\070\026\071\027\073\030\074\031\uffe7\032\uffe7" +
    "\040\uffe7\001\002\000\026\004\050\006\046\014\024\020" +
    "\026\034\036\035\041\036\031\037\030\046\051\047\045" +
    "\001\002\000\026\004\050\006\046\014\024\020\026\034" +
    "\036\035\041\036\031\037\030\046\051\047\045\001\002" +
    "\000\026\007\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\040\uffe3\001\002\000\026" +
    "\004\050\006\046\014\024\020\026\034\036\035\041\036" +
    "\031\037\030\046\051\047\045\001\002\000\026\004\050" +
    "\006\046\014\024\020\026\034\036\035\041\036\031\037" +
    "\030\046\051\047\045\001\002\000\026\004\050\006\046" +
    "\014\024\020\026\034\036\035\041\036\031\037\030\046" +
    "\051\047\045\001\002\000\026\004\050\006\046\014\024" +
    "\020\026\034\036\035\041\036\031\037\030\046\051\047" +
    "\045\001\002\000\032\007\uffe1\017\101\020\102\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\040\uffe1\001\002\000\032\007\uffdb\017\uffdb\020\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\040\uffdb\001\002\000\026\004\050\006\046" +
    "\014\024\020\026\034\036\035\041\036\031\037\030\046" +
    "\051\047\045\001\002\000\026\004\050\006\046\014\024" +
    "\020\026\034\036\035\041\036\031\037\030\046\051\047" +
    "\045\001\002\000\036\007\uffd8\015\105\017\uffd8\020\uffd8" +
    "\021\106\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\040\uffd8\001\002\000\036\007\uffd7" +
    "\015\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\040\uffd7" +
    "\001\002\000\026\004\050\006\046\014\024\020\026\034" +
    "\036\035\041\036\031\037\030\046\051\047\045\001\002" +
    "\000\026\004\050\006\046\014\024\020\026\034\036\035" +
    "\041\036\031\037\030\046\051\047\045\001\002\000\042" +
    "\007\uffd5\015\uffd5\016\111\017\uffd5\020\uffd5\021\uffd5\022" +
    "\112\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\040\uffd5\001\002\000\042\007\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\040\uffd3\001\002\000\026\004\050\006\046\014\024" +
    "\020\026\034\036\035\041\036\031\037\030\046\051\047" +
    "\045\001\002\000\026\004\050\006\046\014\024\020\026" +
    "\034\036\035\041\036\031\037\030\046\051\047\045\001" +
    "\002\000\042\007\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\040\uffd1\001\002\000\042" +
    "\007\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\040\uffd0\001\002\000\042\007\uffd4\015" +
    "\uffd4\016\111\017\uffd4\020\uffd4\021\uffd4\022\112\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\040\uffd4\001\002\000\036\007\uffd9\015\105\017\uffd9" +
    "\020\uffd9\021\106\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\040\uffd9\001\002\000\032" +
    "\007\uffe0\017\101\020\102\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\040\uffe0\001\002" +
    "\000\032\007\uffdc\017\101\020\102\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\040\uffdc" +
    "\001\002\000\032\007\uffdd\017\101\020\102\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\040\uffdd\001\002\000\032\007\uffde\017\101\020\102\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\040\uffde\001\002\000\032\007\uffdf\017\101\020" +
    "\102\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\040\uffdf\001\002\000\046\005\uffcd\007" +
    "\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\040\uffcd\001\002\000\004\002\001" +
    "\001\002\000\026\002\000\011\000\034\000\041\000\042" +
    "\000\043\000\044\000\045\000\050\000\051\000\001\002" +
    "\000\030\004\050\006\046\014\024\020\026\033\032\034" +
    "\036\035\041\036\031\037\030\046\051\047\045\001\002" +
    "\000\006\007\131\032\060\001\002\000\004\010\132\001" +
    "\002\000\022\034\017\041\022\042\005\043\020\044\021" +
    "\045\004\050\012\051\013\001\002\000\024\011\134\034" +
    "\017\041\022\042\005\043\020\044\021\045\004\050\012" +
    "\051\013\001\002\000\030\002\ufff8\011\ufff8\034\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\050\ufff8\051\ufff8" +
    "\052\136\001\002\000\026\002\ufffa\011\ufffa\034\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\050\ufffa\051\ufffa" +
    "\001\002\000\006\010\140\051\013\001\002\000\026\002" +
    "\ufff6\011\ufff6\034\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\050\ufff6\051\ufff6\001\002\000\022\034\017\041" +
    "\022\042\005\043\020\044\021\045\004\050\012\051\013" +
    "\001\002\000\026\002\ufff9\011\ufff9\034\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\050\ufff9\051\ufff9\001\002" +
    "\000\024\011\143\034\017\041\022\042\005\043\020\044" +
    "\021\045\004\050\012\051\013\001\002\000\026\002\ufff7" +
    "\011\ufff7\034\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\050\ufff7\051\ufff7\001\002\000\030\004\050\006\046" +
    "\014\024\020\026\033\032\034\036\035\041\036\031\037" +
    "\030\046\051\047\045\001\002\000\006\007\146\032\060" +
    "\001\002\000\004\040\147\001\002\000\026\002\ufff5\011" +
    "\ufff5\034\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\050\ufff5\051\ufff5\001\002\000\006\012\152\040\153\001" +
    "\002\000\026\002\ufff3\011\ufff3\034\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\050\ufff3\051\ufff3\001\002\000" +
    "\030\004\050\006\046\014\024\020\026\033\032\034\036" +
    "\035\041\036\031\037\030\046\051\047\045\001\002\000" +
    "\026\002\ufff1\011\ufff1\034\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\050\ufff1\051\ufff1\001\002\000\006\032" +
    "\060\040\155\001\002\000\026\002\ufff2\011\ufff2\034\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\050\ufff2\051" +
    "\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\020\002\013\003\014\004\015\005\010\007" +
    "\005\030\007\031\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\125\004\015\005\010\007\005\030\007\031" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\046\011\026\012\024\013\042\014\041" +
    "\016\033\020\037\021\036\024\034\025\032\026\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\123" +
    "\025\032\026\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\107\001\001\000\004\022\103\001\001" +
    "\000\002\001\001\000\004\015\071\001\001\000\020\014" +
    "\066\016\033\020\037\021\036\024\034\025\032\026\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\063\011\026\012\024\013\042\014\041\016\033\020\037" +
    "\021\036\024\034\025\032\026\043\001\001\000\002\001" +
    "\001\000\010\025\032\026\052\027\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\025" +
    "\032\026\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\060\012\024\013\042\014" +
    "\041\016\033\020\037\021\036\024\034\025\032\026\043" +
    "\001\001\000\002\001\001\000\024\012\062\013\042\014" +
    "\041\016\033\020\037\021\036\024\034\025\032\026\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\071\001\001\000\016" +
    "\016\122\020\037\021\036\024\034\025\032\026\043\001" +
    "\001\000\016\016\121\020\037\021\036\024\034\025\032" +
    "\026\043\001\001\000\002\001\001\000\016\016\120\020" +
    "\037\021\036\024\034\025\032\026\043\001\001\000\016" +
    "\016\117\020\037\021\036\024\034\025\032\026\043\001" +
    "\001\000\016\016\116\020\037\021\036\024\034\025\032" +
    "\026\043\001\001\000\016\016\076\020\037\021\036\024" +
    "\034\025\032\026\043\001\001\000\004\017\077\001\001" +
    "\000\002\001\001\000\014\020\115\021\036\024\034\025" +
    "\032\026\043\001\001\000\014\020\102\021\036\024\034" +
    "\025\032\026\043\001\001\000\004\022\103\001\001\000" +
    "\002\001\001\000\012\021\114\024\034\025\032\026\043" +
    "\001\001\000\012\021\106\024\034\025\032\026\043\001" +
    "\001\000\004\023\107\001\001\000\002\001\001\000\010" +
    "\024\113\025\032\026\043\001\001\000\010\024\112\025" +
    "\032\026\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\107\001\001\000\004\022\103\001\001\000" +
    "\004\017\077\001\001\000\004\017\077\001\001\000\004" +
    "\017\077\001\001\000\004\017\077\001\001\000\004\017" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\127\011\026\012\024\013\042\014" +
    "\041\016\033\020\037\021\036\024\034\025\032\026\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\132\003\014\004\015\005\010\007\005\030\007\031\006" +
    "\001\001\000\020\003\125\004\015\005\010\007\005\030" +
    "\007\031\006\032\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\136\033\140\001\001\000\002\001" +
    "\001\000\020\002\141\003\014\004\015\005\010\007\005" +
    "\030\007\031\006\001\001\000\002\001\001\000\016\003" +
    "\125\004\015\005\010\007\005\030\007\031\006\001\001" +
    "\000\002\001\001\000\030\010\144\011\026\012\024\013" +
    "\042\014\041\016\033\020\037\021\036\024\034\025\032" +
    "\026\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\150\001\001\000\002\001\001" +
    "\000\030\010\153\011\026\012\024\013\042\014\041\016" +
    "\033\020\037\021\036\024\034\025\032\026\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        arbol resultado;

        public arbol getArbol(){
                return resultado;
        }

        ArrayList<tablaJson> tablaS = new ArrayList();

        public ArrayList getTablaS(){
                return tablaS;
        }

        public void syntax_error(Symbol s){
	        System.out.println("Sintax error: " +s.value + " en la línea " + s.right+ " en la columna " + s.left);
        }

        public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
	        System.out.println("Sintax error: " +s.value + " en la línea " + s.right+" en la columna " + s.left);
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= instrucciones instruccion 
            {
              arbol RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol a1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a1);
                        instrucciones.añadirHijo(a2);
                RESULT=instrucciones;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a);
                RESULT=instrucciones;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= declaracion1 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= sImprimir 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= sIf 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sIf ::= RIF PAR_IZQ expLog PAR_DER LL_IZQ instrucciones sIf2 
            {
              arbol RESULT =null;
		int if1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String if1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int if2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol if2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sIf = new arbol("sIf");
               
                sIf.añadirHijo(new arbol(if1));
                sIf.añadirHijo(new arbol(parI));
                sIf.añadirHijo(v1);
                sIf.añadirHijo(new arbol(parD));
                sIf.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                sIf.añadirHijo(ins1);
                sIf.añadirHijo(if2);

                RESULT= sIf;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sIf2 ::= LL_DER RELSE elsePrima 
            {
              arbol RESULT =null;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String else1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sIf2 = new arbol("sIf2");
               
                sIf2.añadirHijo(new arbol(llD));
                
                sIf2.añadirHijo(new arbol(else1));
                sIf2.añadirHijo(v1);
               


                RESULT= sIf2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sIf2 ::= LL_DER 
            {
              arbol RESULT =null;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol sIf2 = new arbol("sIf2");
                sIf2.añadirHijo(new arbol(llD));
                RESULT=sIf2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // elsePrima ::= LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol elsePrima = new arbol("elsePrima");
               
                elsePrima.añadirHijo(new arbol(llI));
                v1.setAct(false);
                elsePrima.añadirHijo(v1);
                elsePrima.añadirHijo(new arbol(llD));
               


                RESULT= elsePrima;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePrima",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // elsePrima ::= sIf 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol elsePrima = new arbol("elsePrima");
                elsePrima.añadirHijo(v1);
                RESULT=elsePrima;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePrima",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sImprimir ::= RIMPRIMIR PAR_IZQ expLog PAR_DER PUNTOCOMA 
            {
              arbol RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sImprimir = new arbol("sImprimir");
                sImprimir.añadirHijo(new arbol(imprimir));
                sImprimir.añadirHijo(new arbol(parI));
                sImprimir.añadirHijo(v1);
                sImprimir.añadirHijo(new arbol(parD));
                sImprimir.añadirHijo(new arbol(puntocoma));


                RESULT= sImprimir;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sImprimir",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacion ::= ID IGUAL expLog PUNTOCOMA 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String igual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(igual));
                                                asignacion.añadirHijo(v1);
                                                asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion1 ::= varTipo ID declaracion2 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol dec2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion1 = new arbol("declaracion1");
                        
                       
                                                declaracion1.añadirHijo(tipo);
                                                declaracion1.añadirHijo(new arbol(id));
                                                declaracion1.añadirHijo(dec2);
                                                
                        
                                                RESULT=declaracion1;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion2 ::= IGUAL expLog PUNTOCOMA 
            {
              arbol RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String igual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion2 = new arbol("declaracion2");
                        
                       
                                                declaracion2.añadirHijo(new arbol(igual));
                                                declaracion2.añadirHijo(v1);
                                                declaracion2.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=declaracion2;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion2 ::= PUNTOCOMA 
            {
              arbol RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion2 = new arbol("declaracion2");
                        declaracion2.añadirHijo(new arbol(pc));
                RESULT=declaracion2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varTipo ::= RSTRING 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varTipo ::= RDOUBLE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varTipo ::= RINT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varTipo ::= RCHAR 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varTipo ::= RBOOL 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expLog ::= expLog OR expLog1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog = new arbol("expLog");
                        
                       
                        expLog.añadirHijo(v1);
                        expLog.añadirHijo(new arbol(or));
                        expLog.añadirHijo(v2);
                        
                        RESULT=expLog;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expLog ::= expLog1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog = new arbol("expLog");
                        
        expLog.añadirHijo(v1);
                        
        RESULT=expLog;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expLog1 ::= expLog1 AND expLog2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String and = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog1 = new arbol("expLog1");
                        
                       
                        expLog1.añadirHijo(v1);
                        expLog1.añadirHijo(new arbol(and));
                        expLog1.añadirHijo(v2);
                        
                        RESULT=expLog1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expLog1 ::= expLog2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog1 = new arbol("expLog1");
                        
        expLog1.añadirHijo(v1);
                        
        RESULT=expLog1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expLog2 ::= expNot expRel 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog2 = new arbol("expLog2");
                        
                       
                        expLog2.añadirHijo(v1);
                        expLog2.añadirHijo(v2);
                        
                        RESULT=expLog2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expLog2 ::= expRel 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog2 = new arbol("expLog2");
                        
        expLog2.añadirHijo(v1);
                        
        RESULT=expLog2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expNot ::= expNot NOT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expNot = new arbol("expNot");
                        
                       
                        expNot.añadirHijo(v1);
                        expNot.añadirHijo(new arbol(not));
                        
                        RESULT=expNot;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNot",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expNot ::= NOT 
            {
              arbol RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expNot = new arbol("expNot");
                        
        expNot.añadirHijo(new arbol(not));
                        
        RESULT=expNot;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNot",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expRel ::= expRel expRel1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel = new arbol("expRel");
                        
                       
                        expRel.añadirHijo(v1);
                        expRel.añadirHijo(v2);
                        
                        RESULT=expRel;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expRel ::= expArit 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel = new arbol("expRel");
                        
                        expRel.añadirHijo(v1);
                        
                        RESULT=expRel;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expRel1 ::= MAYOR expArit 
            {
              arbol RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mayor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expRel1 ::= MENOR expArit 
            {
              arbol RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expRel1 ::= MAYORIGUAL expArit 
            {
              arbol RESULT =null;
		int mayorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mayorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mayorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expRel1 ::= MENORIGUAL expArit 
            {
              arbol RESULT =null;
		int menorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expRel1 ::= EQUIVALENTE expArit 
            {
              arbol RESULT =null;
		int equivalenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int equivalenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String equivalente = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(equivalente));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expRel1 ::= DISTINTO expArit 
            {
              arbol RESULT =null;
		int distintoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distintoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String distinto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(distinto));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expArit ::= expArit expArit2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        expArit.añadirHijo(v2);

                        RESULT=expArit;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expArit ::= expArit3 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        
                        RESULT=expArit;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expArit2 ::= MAS expArit3 
            {
              arbol RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(mas));
                        expArit2.añadirHijo(v1);
                        
                        RESULT=expArit2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expArit2 ::= MENOS expArit3 
            {
              arbol RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(menos));
                        expArit2.añadirHijo(v2);
                        
                        RESULT=expArit2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expArit3 ::= expArit3 expArit3Prima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        expArit3.añadirHijo(v2);
                        
                        RESULT=expArit3;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expArit3 ::= expArit4 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        RESULT=expArit3;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expArit3Prima ::= POR expArit4 
            {
              arbol RESULT =null;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String por = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(por));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3Prima",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expArit3Prima ::= POTENCIA expArit4 
            {
              arbol RESULT =null;
		int potencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int potenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String potencia = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(potencia));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3Prima",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expArit4 ::= expArit4 expArit4Prima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        expArit4.añadirHijo(v2);
                        
                        RESULT=expArit4;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expArit4 ::= expPrima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        RESULT=expArit4;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expArit4Prima ::= DIV expPrima 
            {
              arbol RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(div));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4Prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expArit4Prima ::= MODULO expPrima 
            {
              arbol RESULT =null;
		int moduloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moduloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String modulo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(modulo));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4Prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expPrima ::= PAR_IZQ expLog PAR_DER 
            {
              arbol RESULT =null;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expPrima = new arbol("expPrima");
                                        expPrima.añadirHijo(new arbol(parI));
                                        expPrima.añadirHijo(v1);
                                        expPrima.añadirHijo(new arbol(parD));
                                        RESULT=expPrima;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPrima",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expPrima ::= valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expPrima = new arbol("expPrima");
                        expPrima.añadirHijo(v1);
                RESULT=expPrima;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPrima",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valor1 ::= MENOS expPrima 
            {
              arbol RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor1 = new arbol("valor1");
                                        valor1.añadirHijo(new arbol(menos));
                                        valor1.añadirHijo(v1);

                                        RESULT=valor1;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valor1 ::= valor 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor1 = new arbol("valor1");
                        valor1.añadirHijo(v1);
                RESULT=valor1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor ::= STRING 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor ::= INT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor ::= DECIMAL 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor ::= ID 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valorId");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor ::= COR_IZQ datoArray COR_DER 
            {
              arbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valor ::= RTRUE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valor ::= RFALSE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valor ::= TCHAR 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // datoArray ::= datoArray COMA valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v3 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                        datoArray.añadirHijo(new arbol(v2));
                        datoArray.añadirHijo(v3);
                RESULT=datoArray;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datoArray",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // datoArray ::= valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                RESULT=datoArray;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datoArray",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
