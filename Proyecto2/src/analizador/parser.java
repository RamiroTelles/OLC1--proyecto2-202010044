
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import structuras.tablaJson;
import structuras.arbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\040\005\000\002\041\005\000\002" +
    "\041\004\000\002\042\005\000\002\042\003\000\002\035" +
    "\006\000\002\036\006\000\002\036\007\000\002\037\006" +
    "\000\002\037\004\000\002\034\011\000\002\031\011\000" +
    "\002\032\005\000\002\032\003\000\002\033\005\000\002" +
    "\033\003\000\002\030\007\000\002\004\006\000\002\005" +
    "\005\000\002\006\005\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\011\003\000\002\012" +
    "\004\000\002\012\003\000\002\013\004\000\002\013\003" +
    "\000\002\014\004\000\002\014\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\016\004\000\002\016" +
    "\003\000\002\017\004\000\002\017\004\000\002\020\004" +
    "\000\002\020\003\000\002\022\004\000\002\022\004\000" +
    "\002\021\004\000\002\021\003\000\002\023\004\000\002" +
    "\023\004\000\002\024\005\000\002\024\003\000\002\026" +
    "\004\000\002\026\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\026\034\016\041\010\042\025\043\015\044" +
    "\027\045\021\050\023\051\011\052\026\054\007\001\002" +
    "\000\032\002\ufffc\011\ufffc\034\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\050\ufffc\051\ufffc\052\ufffc\054\ufffc" +
    "\001\002\000\030\002\222\034\016\041\010\042\025\043" +
    "\015\044\027\045\021\050\023\051\011\052\026\054\007" +
    "\001\002\000\032\002\ufff8\011\ufff8\034\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\054\ufff8\001\002\000\004\006\214\001\002\000\004\034" +
    "\uffe2\001\002\000\004\006\210\001\002\000\032\002\ufffa" +
    "\011\ufffa\034\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa\001\002\000\032" +
    "\002\uffff\011\uffff\034\uffff\041\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\050\uffff\051\uffff\052\uffff\054\uffff\001\002" +
    "\000\032\002\ufffb\011\ufffb\034\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\050\ufffb\051\ufffb\052\ufffb\054\ufffb" +
    "\001\002\000\004\034\uffe0\001\002\000\006\006\174\012" +
    "\173\001\002\000\032\002\ufffd\011\ufffd\034\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\054\ufffd\001\002\000\004\034\145\001\002\000\004" +
    "\034\uffde\001\002\000\032\002\ufff9\011\ufff9\034\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\054\ufff9\001\002\000\004\034\uffdd\001\002\000" +
    "\032\002\ufffe\011\ufffe\034\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\045\ufffe\050\ufffe\051\ufffe\052\ufffe\054\ufffe\001" +
    "\002\000\004\034\uffe1\001\002\000\004\006\030\001\002" +
    "\000\004\034\uffdf\001\002\000\030\004\055\006\053\014" +
    "\031\020\033\033\037\034\043\035\046\036\036\037\035" +
    "\046\056\047\052\001\002\000\046\005\uffb5\007\uffb5\013" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\040\uffb5\001\002\000\012\007\uffd9\031\uffd9" +
    "\032\uffd9\040\uffd9\001\002\000\026\004\055\006\053\014" +
    "\031\020\033\034\043\035\046\036\036\037\035\046\056" +
    "\047\052\001\002\000\012\007\uffdb\031\067\032\uffdb\040" +
    "\uffdb\001\002\000\046\005\uffbb\007\uffbb\013\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\040\uffbb\001\002\000\046\005\uffba\007\uffba\013\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\040\uffba\001\002\000\030\004\uffd5\006\uffd5\014\uffd5" +
    "\020\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\046" +
    "\uffd5\047\uffd5\001\002\000\046\005\uffbd\007\uffbd\013\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\040\uffbd\001\002\000\032\007\uffd3\017\121\020" +
    "\122\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\040\uffd3\001\002\000\042\007\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\040\uffc3\001\002\000\046\005\uffb9\007\uffb9\013\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\040\uffb9\001\002\000\042\007\uffc7\015\uffc7\016" +
    "\131\017\uffc7\020\uffc7\021\uffc7\022\132\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\040" +
    "\uffc7\001\002\000\036\007\uffcb\015\125\017\uffcb\020\uffcb" +
    "\021\126\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\040\uffcb\001\002\000\046\005\uffbc" +
    "\007\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\040\uffbc\001\002\000\026\007" +
    "\uffd7\023\116\024\115\025\111\026\110\027\113\030\114" +
    "\031\uffd7\032\uffd7\040\uffd7\001\002\000\030\004\055\006" +
    "\053\014\031\020\033\033\106\034\043\035\046\036\036" +
    "\037\035\046\056\047\052\001\002\000\046\005\uffbf\007" +
    "\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\040\uffbf\001\002\000\046\005\uffb6" +
    "\007\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\040\uffb6\001\002\000\030\004" +
    "\055\006\053\014\031\020\033\033\037\034\043\035\046" +
    "\036\036\037\035\046\056\047\052\001\002\000\006\007" +
    "\064\032\065\001\002\000\024\004\055\014\031\020\033" +
    "\034\043\035\046\036\036\037\035\046\056\047\052\001" +
    "\002\000\046\005\uffb7\007\uffb7\013\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\040\uffb7" +
    "\001\002\000\006\005\062\013\061\001\002\000\006\005" +
    "\uffb3\013\uffb3\001\002\000\024\004\055\014\031\020\033" +
    "\034\043\035\046\036\036\037\035\046\056\047\052\001" +
    "\002\000\046\005\uffb8\007\uffb8\013\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\040\uffb8" +
    "\001\002\000\006\005\uffb4\013\uffb4\001\002\000\004\010" +
    "\071\001\002\000\030\004\055\006\053\014\031\020\033" +
    "\033\037\034\043\035\046\036\036\037\035\046\056\047" +
    "\052\001\002\000\012\007\uffdc\031\067\032\uffdc\040\uffdc" +
    "\001\002\000\030\004\055\006\053\014\031\020\033\033" +
    "\037\034\043\035\046\036\036\037\035\046\056\047\052" +
    "\001\002\000\012\007\uffda\031\uffda\032\uffda\040\uffda\001" +
    "\002\000\026\034\016\041\010\042\025\043\015\044\027" +
    "\045\021\050\023\051\011\052\026\054\007\001\002\000" +
    "\030\011\075\034\016\041\010\042\025\043\015\044\027" +
    "\045\021\050\023\051\011\052\026\054\007\001\002\000" +
    "\032\002\uffec\011\uffec\034\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\050\uffec\051\uffec\052\uffec\054\uffec\001" +
    "\002\000\032\002\000\011\000\034\000\041\000\042\000" +
    "\043\000\044\000\045\000\050\000\051\000\052\000\054" +
    "\000\001\002\000\034\002\uffea\011\uffea\034\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\076\054\uffea\001\002\000\006\010\100\052\026" +
    "\001\002\000\032\002\uffe8\011\uffe8\034\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\054\uffe8\001\002\000\026\034\016\041\010\042\025\043" +
    "\015\044\027\045\021\050\023\051\011\052\026\054\007" +
    "\001\002\000\032\002\uffeb\011\uffeb\034\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\054\uffeb\001\002\000\030\011\103\034\016\041\010\042" +
    "\025\043\015\044\027\045\021\050\023\051\011\052\026" +
    "\054\007\001\002\000\032\002\uffe9\011\uffe9\034\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\054\uffe9\001\002\000\006\007\105\032\065\001" +
    "\002\000\046\005\uffc0\007\uffc0\013\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\040\uffc0" +
    "\001\002\000\030\004\uffd6\006\uffd6\014\uffd6\020\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\046\uffd6\047\uffd6" +
    "\001\002\000\026\007\uffd8\023\116\024\115\025\111\026" +
    "\110\027\113\030\114\031\uffd8\032\uffd8\040\uffd8\001\002" +
    "\000\026\004\055\006\053\014\031\020\033\034\043\035" +
    "\046\036\036\037\035\046\056\047\052\001\002\000\026" +
    "\004\055\006\053\014\031\020\033\034\043\035\046\036" +
    "\036\037\035\046\056\047\052\001\002\000\026\007\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\040\uffd4\001\002\000\026\004\055\006\053" +
    "\014\031\020\033\034\043\035\046\036\036\037\035\046" +
    "\056\047\052\001\002\000\026\004\055\006\053\014\031" +
    "\020\033\034\043\035\046\036\036\037\035\046\056\047" +
    "\052\001\002\000\026\004\055\006\053\014\031\020\033" +
    "\034\043\035\046\036\036\037\035\046\056\047\052\001" +
    "\002\000\026\004\055\006\053\014\031\020\033\034\043" +
    "\035\046\036\036\037\035\046\056\047\052\001\002\000" +
    "\032\007\uffd2\017\121\020\122\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\040\uffd2\001" +
    "\002\000\032\007\uffcc\017\uffcc\020\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\040" +
    "\uffcc\001\002\000\026\004\055\006\053\014\031\020\033" +
    "\034\043\035\046\036\036\037\035\046\056\047\052\001" +
    "\002\000\026\004\055\006\053\014\031\020\033\034\043" +
    "\035\046\036\036\037\035\046\056\047\052\001\002\000" +
    "\036\007\uffc9\015\125\017\uffc9\020\uffc9\021\126\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\040\uffc9\001\002\000\036\007\uffc8\015\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\040\uffc8\001\002\000\026" +
    "\004\055\006\053\014\031\020\033\034\043\035\046\036" +
    "\036\037\035\046\056\047\052\001\002\000\026\004\055" +
    "\006\053\014\031\020\033\034\043\035\046\036\036\037" +
    "\035\046\056\047\052\001\002\000\042\007\uffc6\015\uffc6" +
    "\016\131\017\uffc6\020\uffc6\021\uffc6\022\132\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\040\uffc6\001\002\000\042\007\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\040\uffc4\001" +
    "\002\000\026\004\055\006\053\014\031\020\033\034\043" +
    "\035\046\036\036\037\035\046\056\047\052\001\002\000" +
    "\026\004\055\006\053\014\031\020\033\034\043\035\046" +
    "\036\036\037\035\046\056\047\052\001\002\000\042\007" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\040\uffc2\001\002\000\042\007\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\040\uffc1\001\002\000\042\007\uffc5\015\uffc5\016\131\017" +
    "\uffc5\020\uffc5\021\uffc5\022\132\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\040\uffc5\001" +
    "\002\000\036\007\uffca\015\125\017\uffca\020\uffca\021\126" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\040\uffca\001\002\000\032\007\uffd1\017\121" +
    "\020\122\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\040\uffd1\001\002\000\032\007\uffcd" +
    "\017\121\020\122\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\040\uffcd\001\002\000\032" +
    "\007\uffce\017\121\020\122\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\040\uffce\001\002" +
    "\000\032\007\uffd0\017\121\020\122\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\040\uffd0" +
    "\001\002\000\032\007\uffcf\017\121\020\122\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\040\uffcf\001\002\000\046\005\uffbe\007\uffbe\013\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\040\uffbe\001\002\000\010\006\150\012\147\040\151" +
    "\001\002\000\032\002\uffe5\011\uffe5\034\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\054\uffe5\001\002\000\030\004\055\006\053\014\031\020" +
    "\033\033\037\034\043\035\046\036\036\037\035\046\056" +
    "\047\052\001\002\000\020\007\154\041\010\042\025\043" +
    "\015\044\027\045\021\050\023\001\002\000\032\002\uffe3" +
    "\011\uffe3\034\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3\001\002\000\004" +
    "\034\170\001\002\000\032\002\ufff2\011\ufff2\034\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\050\ufff2\051\ufff2" +
    "\052\ufff2\054\ufff2\001\002\000\004\010\165\001\002\000" +
    "\006\007\157\013\156\001\002\000\016\041\010\042\025" +
    "\043\015\044\027\045\021\050\023\001\002\000\004\010" +
    "\160\001\002\000\026\034\016\041\010\042\025\043\015" +
    "\044\027\045\021\050\023\051\011\052\026\054\007\001" +
    "\002\000\030\011\162\034\016\041\010\042\025\043\015" +
    "\044\027\045\021\050\023\051\011\052\026\054\007\001" +
    "\002\000\032\002\ufff0\011\ufff0\034\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\050\ufff0\051\ufff0\052\ufff0\054" +
    "\ufff0\001\002\000\004\034\164\001\002\000\006\007\uffef" +
    "\013\uffef\001\002\000\026\034\016\041\010\042\025\043" +
    "\015\044\027\045\021\050\023\051\011\052\026\054\007" +
    "\001\002\000\030\011\167\034\016\041\010\042\025\043" +
    "\015\044\027\045\021\050\023\051\011\052\026\054\007" +
    "\001\002\000\032\002\ufff1\011\ufff1\034\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\050\ufff1\051\ufff1\052\ufff1" +
    "\054\ufff1\001\002\000\006\007\uffee\013\uffee\001\002\000" +
    "\006\032\065\040\172\001\002\000\032\002\uffe4\011\uffe4" +
    "\034\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\054\uffe4\001\002\000\030\004\055" +
    "\006\053\014\031\020\033\033\037\034\043\035\046\036" +
    "\036\037\035\046\056\047\052\001\002\000\006\007\200" +
    "\034\175\001\002\000\006\007\ufff3\013\ufff3\001\002\000" +
    "\006\007\203\013\202\001\002\000\032\002\ufff7\011\ufff7" +
    "\034\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\054\ufff7\001\002\000\004\040\201" +
    "\001\002\000\032\002\ufff5\011\ufff5\034\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\054\ufff5\001\002\000\004\034\205\001\002\000\004\040" +
    "\204\001\002\000\032\002\ufff6\011\ufff6\034\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\054\ufff6\001\002\000\006\007\ufff4\013\ufff4\001\002" +
    "\000\006\032\065\040\207\001\002\000\032\002\uffe6\011" +
    "\uffe6\034\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\054\uffe6\001\002\000\030\004" +
    "\055\006\053\014\031\020\033\033\037\034\043\035\046" +
    "\036\036\037\035\046\056\047\052\001\002\000\006\007" +
    "\212\032\065\001\002\000\004\040\213\001\002\000\032" +
    "\002\uffe7\011\uffe7\034\uffe7\041\uffe7\042\uffe7\043\uffe7\044" +
    "\uffe7\045\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7\001\002" +
    "\000\030\004\055\006\053\014\031\020\033\033\037\034" +
    "\043\035\046\036\036\037\035\046\056\047\052\001\002" +
    "\000\006\007\216\032\065\001\002\000\004\010\217\001" +
    "\002\000\026\034\016\041\010\042\025\043\015\044\027" +
    "\045\021\050\023\051\011\052\026\054\007\001\002\000" +
    "\030\011\221\034\016\041\010\042\025\043\015\044\027" +
    "\045\021\050\023\051\011\052\026\054\007\001\002\000" +
    "\032\002\uffed\011\uffed\034\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\050\uffed\051\uffed\052\uffed\054\uffed\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\026\002\004\003\012\004\016\005\023\007" +
    "\017\030\003\031\013\034\011\035\021\040\005\001\001" +
    "\000\002\001\001\000\024\003\073\004\016\005\023\007" +
    "\017\030\003\031\013\034\011\035\021\040\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\010\053\011\033" +
    "\012\031\013\047\014\046\016\040\020\044\021\043\024" +
    "\041\025\037\026\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\143\025\037\026\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\127\001\001" +
    "\000\004\022\123\001\001\000\002\001\001\000\004\015" +
    "\111\001\001\000\020\014\106\016\040\020\044\021\043" +
    "\024\041\025\037\026\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\103\011\033\012\031\013\047" +
    "\014\046\016\040\020\044\021\043\024\041\025\037\026" +
    "\050\001\001\000\002\001\001\000\010\025\037\026\057" +
    "\027\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\037\026\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\065\012\031\013\047\014\046\016\040\020\044\021\043" +
    "\024\041\025\037\026\050\001\001\000\002\001\001\000" +
    "\024\012\067\013\047\014\046\016\040\020\044\021\043" +
    "\024\041\025\037\026\050\001\001\000\002\001\001\000" +
    "\026\002\071\003\012\004\016\005\023\007\017\030\003" +
    "\031\013\034\011\035\021\040\005\001\001\000\026\003" +
    "\073\004\016\005\023\007\017\030\003\031\013\032\072" +
    "\034\011\035\021\040\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\076\033\100" +
    "\001\001\000\002\001\001\000\026\002\101\003\012\004" +
    "\016\005\023\007\017\030\003\031\013\034\011\035\021" +
    "\040\005\001\001\000\002\001\001\000\024\003\073\004" +
    "\016\005\023\007\017\030\003\031\013\034\011\035\021" +
    "\040\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\111\001\001" +
    "\000\016\016\142\020\044\021\043\024\041\025\037\026" +
    "\050\001\001\000\016\016\141\020\044\021\043\024\041" +
    "\025\037\026\050\001\001\000\002\001\001\000\016\016" +
    "\140\020\044\021\043\024\041\025\037\026\050\001\001" +
    "\000\016\016\137\020\044\021\043\024\041\025\037\026" +
    "\050\001\001\000\016\016\136\020\044\021\043\024\041" +
    "\025\037\026\050\001\001\000\016\016\116\020\044\021" +
    "\043\024\041\025\037\026\050\001\001\000\004\017\117" +
    "\001\001\000\002\001\001\000\014\020\135\021\043\024" +
    "\041\025\037\026\050\001\001\000\014\020\122\021\043" +
    "\024\041\025\037\026\050\001\001\000\004\022\123\001" +
    "\001\000\002\001\001\000\012\021\134\024\041\025\037" +
    "\026\050\001\001\000\012\021\126\024\041\025\037\026" +
    "\050\001\001\000\004\023\127\001\001\000\002\001\001" +
    "\000\010\024\133\025\037\026\050\001\001\000\010\024" +
    "\132\025\037\026\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\127\001\001\000\004\022\123\001" +
    "\001\000\004\017\117\001\001\000\004\017\117\001\001" +
    "\000\004\017\117\001\001\000\004\017\117\001\001\000" +
    "\004\017\117\001\001\000\002\001\001\000\004\006\145" +
    "\001\001\000\002\001\001\000\030\010\170\011\033\012" +
    "\031\013\047\014\046\016\040\020\044\021\043\024\041" +
    "\025\037\026\050\001\001\000\010\007\151\036\152\037" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\162\001\001\000\002\001\001\000\026\002\160\003\012" +
    "\004\016\005\023\007\017\030\003\031\013\034\011\035" +
    "\021\040\005\001\001\000\024\003\073\004\016\005\023" +
    "\007\017\030\003\031\013\034\011\035\021\040\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\165\003\012\004\016\005\023\007\017\030" +
    "\003\031\013\034\011\035\021\040\005\001\001\000\024" +
    "\003\073\004\016\005\023\007\017\030\003\031\013\034" +
    "\011\035\021\040\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\205\011\033\012\031\013\047\014\046\016\040\020\044" +
    "\021\043\024\041\025\037\026\050\001\001\000\006\041" +
    "\176\042\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\210\011\033\012\031\013\047\014\046\016\040\020\044" +
    "\021\043\024\041\025\037\026\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\010\214" +
    "\011\033\012\031\013\047\014\046\016\040\020\044\021" +
    "\043\024\041\025\037\026\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\217\003\012\004\016\005" +
    "\023\007\017\030\003\031\013\034\011\035\021\040\005" +
    "\001\001\000\024\003\073\004\016\005\023\007\017\030" +
    "\003\031\013\034\011\035\021\040\005\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        arbol resultado;

        public arbol getArbol(){
                return resultado;
        }

        ArrayList<tablaJson> tablaS = new ArrayList();

        public ArrayList getTablaS(){
                return tablaS;
        }

        public void syntax_error(Symbol s){
	        System.out.println("Sintax error: " +s.value + " en la línea " + s.right+ " en la columna " + s.left);
        }

        public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
	        System.out.println("Sintax error: " +s.value + " en la línea " + s.right+" en la columna " + s.left);
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= instrucciones instruccion 
            {
              arbol RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol a1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a1);
                        instrucciones.añadirHijo(a2);
                RESULT=instrucciones;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a);
                RESULT=instrucciones;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= declaracion1 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= sImprimir 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= sIf 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= senWhile 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= lf1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= llamadaFM 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // llamadaFM ::= ID PAR_IZQ lenviarParam 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol llamadaFM = new arbol("llamadaFM");
                llamadaFM.añadirHijo(new arbol(id));
                llamadaFM.añadirHijo(new arbol(parI));
                llamadaFM.añadirHijo(parametros);
                RESULT=llamadaFM;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lenviarParam ::= lenviarParam1 PAR_DER PUNTOCOMA 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol lenviarParam = new arbol("lenviarParam");
                
                lenviarParam.añadirHijo(v1);
                lenviarParam.añadirHijo(new arbol(parD));
                lenviarParam.añadirHijo(new arbol(puntocoma));
                
                RESULT=lenviarParam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lenviarParam ::= PAR_DER PUNTOCOMA 
            {
              arbol RESULT =null;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol lenviarParam = new arbol("lenviarParam");
                
                
                lenviarParam.añadirHijo(new arbol(parD));
                lenviarParam.añadirHijo(new arbol(puntocoma));
                
                RESULT=lenviarParam;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lenviarParam1 ::= lenviarParam1 COMA ID 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lenviarParam1 = new arbol("lenviarParam1");

                lenviarParam1.añadirHijo(parametros);
                lenviarParam1.añadirHijo(new arbol(coma));
                
                lenviarParam1.añadirHijo(new arbol(id));
               

                RESULT= lenviarParam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lenviarParam1 ::= ID 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lenviarParam1 = new arbol("lenviarParam1");

                
                lenviarParam1.añadirHijo(new arbol(id));
               

                RESULT= lenviarParam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lf1 ::= varTipo ID PAR_IZQ lparam 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lf1 = new arbol("lf1");
               
                lf1.añadirHijo(tipo);
                lf1.añadirHijo(new arbol(id));
                lf1.añadirHijo(new arbol(parI));
                
                lf1.añadirHijo(parametros);

                RESULT= lf1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lf1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lparam ::= PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam = new arbol("lparam");
               
                lparam.añadirHijo(new arbol(parD));
                lparam.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                lparam.añadirHijo(ins1);
                lparam.añadirHijo(new arbol(llD));
                
                
                

                RESULT= lparam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lparam ::= lparam1 PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam = new arbol("lparam");

                lparam.añadirHijo(parametros);
                lparam.añadirHijo(new arbol(parD));
                lparam.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                lparam.añadirHijo(ins1);
                lparam.añadirHijo(new arbol(llD));
                
                
                

                RESULT= lparam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lparam1 ::= lparam1 COMA varTipo ID 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam1 = new arbol("lparam1");

                lparam1.añadirHijo(parametros);
                lparam1.añadirHijo(new arbol(coma));
                lparam1.añadirHijo(tipo);
                lparam1.añadirHijo(new arbol(id));
               

                RESULT= lparam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lparam1 ::= varTipo ID 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam1 = new arbol("lparam1");

               
                lparam1.añadirHijo(tipo);
                lparam1.añadirHijo(new arbol(id));
               

                RESULT= lparam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // senWhile ::= RWHILE PAR_IZQ expLog PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int while1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int while1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String while1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol senWhile = new arbol("senWhile");
               
                senWhile.añadirHijo(new arbol(while1));
                senWhile.añadirHijo(new arbol(parI));
                senWhile.añadirHijo(v1);
                senWhile.añadirHijo(new arbol(parD));
                senWhile.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senWhile.añadirHijo(ins1);
                senWhile.añadirHijo(new arbol(llD));

                RESULT= senWhile;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sIf ::= RIF PAR_IZQ expLog PAR_DER LL_IZQ instrucciones sIf2 
            {
              arbol RESULT =null;
		int if1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String if1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int if2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol if2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sIf = new arbol("sIf");
               
                sIf.añadirHijo(new arbol(if1));
                sIf.añadirHijo(new arbol(parI));
                sIf.añadirHijo(v1);
                sIf.añadirHijo(new arbol(parD));
                sIf.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                sIf.añadirHijo(ins1);
                sIf.añadirHijo(if2);

                RESULT= sIf;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sIf2 ::= LL_DER RELSE elsePrima 
            {
              arbol RESULT =null;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String else1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sIf2 = new arbol("sIf2");
               
                sIf2.añadirHijo(new arbol(llD));
                
                sIf2.añadirHijo(new arbol(else1));
                sIf2.añadirHijo(v1);
               


                RESULT= sIf2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sIf2 ::= LL_DER 
            {
              arbol RESULT =null;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol sIf2 = new arbol("sIf2");
                sIf2.añadirHijo(new arbol(llD));
                RESULT=sIf2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // elsePrima ::= LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol elsePrima = new arbol("elsePrima");
               
                elsePrima.añadirHijo(new arbol(llI));
                v1.setAct(false);
                elsePrima.añadirHijo(v1);
                elsePrima.añadirHijo(new arbol(llD));
               


                RESULT= elsePrima;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePrima",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elsePrima ::= sIf 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol elsePrima = new arbol("elsePrima");
                elsePrima.añadirHijo(v1);
                RESULT=elsePrima;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePrima",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sImprimir ::= RIMPRIMIR PAR_IZQ expLog PAR_DER PUNTOCOMA 
            {
              arbol RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sImprimir = new arbol("sImprimir");
                sImprimir.añadirHijo(new arbol(imprimir));
                sImprimir.añadirHijo(new arbol(parI));
                sImprimir.añadirHijo(v1);
                sImprimir.añadirHijo(new arbol(parD));
                sImprimir.añadirHijo(new arbol(puntocoma));


                RESULT= sImprimir;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sImprimir",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignacion ::= ID IGUAL expLog PUNTOCOMA 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String igual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(igual));
                                                asignacion.añadirHijo(v1);
                                                asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion1 ::= varTipo ID declaracion2 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol dec2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion1 = new arbol("declaracion1");
                        
                       
                                                declaracion1.añadirHijo(tipo);
                                                declaracion1.añadirHijo(new arbol(id));
                                                declaracion1.añadirHijo(dec2);
                                                
                        
                                                RESULT=declaracion1;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion2 ::= IGUAL expLog PUNTOCOMA 
            {
              arbol RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String igual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion2 = new arbol("declaracion2");
                        
                       
                                                declaracion2.añadirHijo(new arbol(igual));
                                                declaracion2.añadirHijo(v1);
                                                declaracion2.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=declaracion2;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion2 ::= PUNTOCOMA 
            {
              arbol RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion2 = new arbol("declaracion2");
                        declaracion2.añadirHijo(new arbol(pc));
                RESULT=declaracion2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varTipo ::= RSTRING 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varTipo ::= RDOUBLE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varTipo ::= RINT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varTipo ::= RCHAR 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varTipo ::= RBOOL 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // varTipo ::= RVOID 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expLog ::= expLog OR expLog1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog = new arbol("expLog");
                        
                       
                        expLog.añadirHijo(v1);
                        expLog.añadirHijo(new arbol(or));
                        expLog.añadirHijo(v2);
                        
                        RESULT=expLog;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expLog ::= expLog1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog = new arbol("expLog");
                        
        expLog.añadirHijo(v1);
                        
        RESULT=expLog;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expLog1 ::= expLog1 AND expLog2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String and = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog1 = new arbol("expLog1");
                        
                       
                        expLog1.añadirHijo(v1);
                        expLog1.añadirHijo(new arbol(and));
                        expLog1.añadirHijo(v2);
                        
                        RESULT=expLog1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expLog1 ::= expLog2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog1 = new arbol("expLog1");
                        
        expLog1.añadirHijo(v1);
                        
        RESULT=expLog1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expLog2 ::= expNot expRel 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog2 = new arbol("expLog2");
                        
                       
                        expLog2.añadirHijo(v1);
                        expLog2.añadirHijo(v2);
                        
                        RESULT=expLog2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expLog2 ::= expRel 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog2 = new arbol("expLog2");
                        
        expLog2.añadirHijo(v1);
                        
        RESULT=expLog2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expNot ::= expNot NOT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expNot = new arbol("expNot");
                        
                       
                        expNot.añadirHijo(v1);
                        expNot.añadirHijo(new arbol(not));
                        
                        RESULT=expNot;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNot",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expNot ::= NOT 
            {
              arbol RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expNot = new arbol("expNot");
                        
        expNot.añadirHijo(new arbol(not));
                        
        RESULT=expNot;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNot",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expRel ::= expRel expRel1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel = new arbol("expRel");
                        
                       
                        expRel.añadirHijo(v1);
                        expRel.añadirHijo(v2);
                        
                        RESULT=expRel;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expRel ::= expArit 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel = new arbol("expRel");
                        
                        expRel.añadirHijo(v1);
                        
                        RESULT=expRel;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expRel1 ::= MAYOR expArit 
            {
              arbol RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mayor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expRel1 ::= MENOR expArit 
            {
              arbol RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expRel1 ::= MAYORIGUAL expArit 
            {
              arbol RESULT =null;
		int mayorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mayorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mayorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expRel1 ::= MENORIGUAL expArit 
            {
              arbol RESULT =null;
		int menorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expRel1 ::= EQUIVALENTE expArit 
            {
              arbol RESULT =null;
		int equivalenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int equivalenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String equivalente = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(equivalente));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expRel1 ::= DISTINTO expArit 
            {
              arbol RESULT =null;
		int distintoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distintoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String distinto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(distinto));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expArit ::= expArit expArit2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        expArit.añadirHijo(v2);

                        RESULT=expArit;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expArit ::= expArit3 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        
                        RESULT=expArit;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expArit2 ::= MAS expArit3 
            {
              arbol RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(mas));
                        expArit2.añadirHijo(v1);
                        
                        RESULT=expArit2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expArit2 ::= MENOS expArit3 
            {
              arbol RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(menos));
                        expArit2.añadirHijo(v2);
                        
                        RESULT=expArit2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expArit3 ::= expArit3 expArit3Prima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        expArit3.añadirHijo(v2);
                        
                        RESULT=expArit3;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expArit3 ::= expArit4 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        RESULT=expArit3;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expArit3Prima ::= POR expArit4 
            {
              arbol RESULT =null;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String por = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(por));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3Prima",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expArit3Prima ::= POTENCIA expArit4 
            {
              arbol RESULT =null;
		int potencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int potenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String potencia = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(potencia));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3Prima",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expArit4 ::= expArit4 expArit4Prima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        expArit4.añadirHijo(v2);
                        
                        RESULT=expArit4;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expArit4 ::= expPrima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        RESULT=expArit4;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expArit4Prima ::= DIV expPrima 
            {
              arbol RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(div));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4Prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expArit4Prima ::= MODULO expPrima 
            {
              arbol RESULT =null;
		int moduloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moduloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String modulo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(modulo));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4Prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expPrima ::= PAR_IZQ expLog PAR_DER 
            {
              arbol RESULT =null;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expPrima = new arbol("expPrima");
                                        expPrima.añadirHijo(new arbol(parI));
                                        expPrima.añadirHijo(v1);
                                        expPrima.añadirHijo(new arbol(parD));
                                        RESULT=expPrima;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPrima",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expPrima ::= valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expPrima = new arbol("expPrima");
                        expPrima.añadirHijo(v1);
                RESULT=expPrima;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPrima",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valor1 ::= MENOS expPrima 
            {
              arbol RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor1 = new arbol("valor1");
                                        valor1.añadirHijo(new arbol(menos));
                                        valor1.añadirHijo(v1);

                                        RESULT=valor1;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valor1 ::= valor 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor1 = new arbol("valor1");
                        valor1.añadirHijo(v1);
                RESULT=valor1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valor ::= STRING 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valor ::= INT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valor ::= DECIMAL 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valor ::= ID 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valorId");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valor ::= COR_IZQ datoArray COR_DER 
            {
              arbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor ::= RTRUE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor ::= RFALSE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor ::= TCHAR 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // datoArray ::= datoArray COMA valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v3 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                        datoArray.añadirHijo(new arbol(v2));
                        datoArray.añadirHijo(v3);
                RESULT=datoArray;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datoArray",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // datoArray ::= valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                RESULT=datoArray;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datoArray",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
