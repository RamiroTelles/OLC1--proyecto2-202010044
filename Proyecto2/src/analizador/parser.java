
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import structuras.tablaJson;
import structuras.arbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\045\014\000\002\044\013\000\002\040" +
    "\007\000\002\041\004\000\002\041\003\000\002\042\005" +
    "\000\002\042\003\000\002\035\006\000\002\036\006\000" +
    "\002\036\007\000\002\037\006\000\002\037\004\000\002" +
    "\034\011\000\002\031\011\000\002\032\005\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\030\007" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\005\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\005" +
    "\000\002\010\003\000\002\011\005\000\002\011\003\000" +
    "\002\012\004\000\002\012\003\000\002\013\004\000\002" +
    "\013\003\000\002\014\004\000\002\014\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\016\004\000" +
    "\002\016\003\000\002\017\004\000\002\017\004\000\002" +
    "\020\004\000\002\020\003\000\002\022\004\000\002\022" +
    "\004\000\002\021\004\000\002\021\003\000\002\023\004" +
    "\000\002\023\004\000\002\024\005\000\002\024\003\000" +
    "\002\026\004\000\002\026\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\043\005\000\002\027\005\000" +
    "\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\034\034\024\041\013\042\031\043\021\044" +
    "\033\045\022\050\027\051\015\052\032\054\011\055\014" +
    "\056\034\057\010\001\002\000\040\002\ufffc\011\ufffc\034" +
    "\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\001" +
    "\002\000\040\002\ufff8\011\ufff8\034\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\050\ufff8\051\ufff8\052\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000\036\002\264" +
    "\034\024\041\013\042\031\043\021\044\033\045\022\050" +
    "\027\051\015\052\032\054\011\055\014\056\034\057\010" +
    "\001\002\000\004\040\263\001\002\000\004\006\247\001" +
    "\002\000\004\006\241\001\002\000\040\002\ufff6\011\ufff6" +
    "\034\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\001\002\000\004\034\uffdb\001\002\000\004\034\235\001" +
    "\002\000\004\006\231\001\002\000\040\002\ufffa\011\ufffa" +
    "\034\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa" +
    "\001\002\000\040\002\uffff\011\uffff\034\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\050\uffff\051\uffff\052\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\001\002\000\040\002" +
    "\ufffb\011\ufffb\034\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\050\ufffb\051\ufffb\052\ufffb\054\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\001\002\000\004\034\uffd9\001\002\000\004" +
    "\034\uffd7\001\002\000\004\040\230\001\002\000\012\006" +
    "\146\012\223\017\222\020\224\001\002\000\004\034\174" +
    "\001\002\000\040\002\ufff9\011\ufff9\034\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002\000\004\034" +
    "\uffd6\001\002\000\040\002\ufffe\011\ufffe\034\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\050\ufffe\051\ufffe\052" +
    "\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002\000\004" +
    "\034\uffda\001\002\000\004\006\157\001\002\000\004\034" +
    "\uffd8\001\002\000\004\010\036\001\002\000\040\002\ufff5" +
    "\011\ufff5\034\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\001\002\000\034\034\024\041\013\042\031\043" +
    "\021\044\033\045\022\050\027\051\015\052\032\054\011" +
    "\055\014\056\034\057\010\001\002\000\036\011\041\034" +
    "\024\041\013\042\031\043\021\044\033\045\022\050\027" +
    "\051\015\052\032\054\011\055\014\056\034\057\010\001" +
    "\002\000\040\002\000\011\000\034\000\041\000\042\000" +
    "\043\000\044\000\045\000\050\000\051\000\052\000\054" +
    "\000\055\000\056\000\057\000\001\002\000\004\054\042" +
    "\001\002\000\004\006\043\001\002\000\030\004\071\006" +
    "\067\014\044\020\047\033\053\034\057\035\062\036\052" +
    "\037\051\046\072\047\066\001\002\000\046\005\uffae\007" +
    "\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\040\uffae\001\002\000\014\007\uffd2" +
    "\013\uffd2\031\uffd2\032\uffd2\040\uffd2\001\002\000\046\005" +
    "\uffad\007\uffad\013\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\040\uffad\001\002\000\026" +
    "\004\071\006\067\014\044\020\047\034\057\035\062\036" +
    "\052\037\051\046\072\047\066\001\002\000\014\007\uffd4" +
    "\013\uffd4\031\103\032\uffd4\040\uffd4\001\002\000\046\005" +
    "\uffb4\007\uffb4\013\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\040\uffb4\001\002\000\046" +
    "\005\uffb3\007\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\040\uffb3\001\002\000" +
    "\030\004\uffce\006\uffce\014\uffce\020\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\046\uffce\047\uffce\001\002\000" +
    "\046\005\uffb6\007\uffb6\013\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\040\uffb6\001\002" +
    "\000\034\007\uffcc\013\uffcc\017\123\020\124\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\040\uffcc\001\002\000\044\007\uffbc\013\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\040" +
    "\uffbc\001\002\000\050\005\uffb2\006\146\007\uffb2\013\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\040\uffb2\001\002\000\044\007\uffc0\013\uffc0\015" +
    "\uffc0\016\133\017\uffc0\020\uffc0\021\uffc0\022\134\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\040\uffc0\001\002\000\040\007\uffc4\013\uffc4\015\127" +
    "\017\uffc4\020\uffc4\021\130\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\040\uffc4\001\002" +
    "\000\046\005\uffb5\007\uffb5\013\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\040\uffb5\001" +
    "\002\000\030\007\uffd0\013\uffd0\023\120\024\117\025\112" +
    "\026\113\027\115\030\116\031\uffd0\032\uffd0\040\uffd0\001" +
    "\002\000\030\004\071\006\067\014\044\020\047\033\110" +
    "\034\057\035\062\036\052\037\051\046\072\047\066\001" +
    "\002\000\046\005\uffb8\007\uffb8\013\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\040\uffb8" +
    "\001\002\000\046\005\uffaf\007\uffaf\013\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\040" +
    "\uffaf\001\002\000\030\004\071\006\067\014\044\020\047" +
    "\033\053\034\057\035\062\036\052\037\051\046\072\047" +
    "\066\001\002\000\006\007\100\032\101\001\002\000\024" +
    "\004\071\014\044\020\047\034\057\035\062\036\052\037" +
    "\051\046\072\047\066\001\002\000\046\005\uffb0\007\uffb0" +
    "\013\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\040\uffb0\001\002\000\006\005\076\013" +
    "\075\001\002\000\006\005\uffaa\013\uffaa\001\002\000\024" +
    "\004\071\014\044\020\047\034\057\035\062\036\052\037" +
    "\051\046\072\047\066\001\002\000\046\005\uffb1\007\uffb1" +
    "\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\040\uffb1\001\002\000\006\005\uffab\013" +
    "\uffab\001\002\000\004\040\105\001\002\000\030\004\071" +
    "\006\067\014\044\020\047\033\053\034\057\035\062\036" +
    "\052\037\051\046\072\047\066\001\002\000\014\007\uffd5" +
    "\013\uffd5\031\103\032\uffd5\040\uffd5\001\002\000\030\004" +
    "\071\006\067\014\044\020\047\033\053\034\057\035\062" +
    "\036\052\037\051\046\072\047\066\001\002\000\014\007" +
    "\uffd3\013\uffd3\031\uffd3\032\uffd3\040\uffd3\001\002\000\040" +
    "\002\ufff3\011\ufff3\034\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\050\ufff3\051\ufff3\052\ufff3\054\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\001\002\000\006\007\107\032\101\001" +
    "\002\000\046\005\uffb9\007\uffb9\013\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\040\uffb9" +
    "\001\002\000\030\004\uffcf\006\uffcf\014\uffcf\020\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\046\uffcf\047\uffcf" +
    "\001\002\000\030\007\uffd1\013\uffd1\023\120\024\117\025" +
    "\112\026\113\027\115\030\116\031\uffd1\032\uffd1\040\uffd1" +
    "\001\002\000\026\004\071\006\067\014\044\020\047\034" +
    "\057\035\062\036\052\037\051\046\072\047\066\001\002" +
    "\000\026\004\071\006\067\014\044\020\047\034\057\035" +
    "\062\036\052\037\051\046\072\047\066\001\002\000\030" +
    "\007\uffcd\013\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\040\uffcd\001\002\000\026" +
    "\004\071\006\067\014\044\020\047\034\057\035\062\036" +
    "\052\037\051\046\072\047\066\001\002\000\026\004\071" +
    "\006\067\014\044\020\047\034\057\035\062\036\052\037" +
    "\051\046\072\047\066\001\002\000\026\004\071\006\067" +
    "\014\044\020\047\034\057\035\062\036\052\037\051\046" +
    "\072\047\066\001\002\000\026\004\071\006\067\014\044" +
    "\020\047\034\057\035\062\036\052\037\051\046\072\047" +
    "\066\001\002\000\034\007\uffcb\013\uffcb\017\123\020\124" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\040\uffcb\001\002\000\034\007\uffc5\013\uffc5" +
    "\017\uffc5\020\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\040\uffc5\001\002\000\026" +
    "\004\071\006\067\014\044\020\047\034\057\035\062\036" +
    "\052\037\051\046\072\047\066\001\002\000\026\004\071" +
    "\006\067\014\044\020\047\034\057\035\062\036\052\037" +
    "\051\046\072\047\066\001\002\000\040\007\uffc2\013\uffc2" +
    "\015\127\017\uffc2\020\uffc2\021\130\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\040\uffc2" +
    "\001\002\000\040\007\uffc1\013\uffc1\015\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\040\uffc1\001\002\000\026\004" +
    "\071\006\067\014\044\020\047\034\057\035\062\036\052" +
    "\037\051\046\072\047\066\001\002\000\026\004\071\006" +
    "\067\014\044\020\047\034\057\035\062\036\052\037\051" +
    "\046\072\047\066\001\002\000\044\007\uffbf\013\uffbf\015" +
    "\uffbf\016\133\017\uffbf\020\uffbf\021\uffbf\022\134\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\040\uffbf\001\002\000\044\007\uffbd\013\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\040\uffbd\001\002\000\026\004\071\006\067\014\044\020" +
    "\047\034\057\035\062\036\052\037\051\046\072\047\066" +
    "\001\002\000\026\004\071\006\067\014\044\020\047\034" +
    "\057\035\062\036\052\037\051\046\072\047\066\001\002" +
    "\000\044\007\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\040\uffbb\001\002\000" +
    "\044\007\uffba\013\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\040\uffba\001\002\000\044" +
    "\007\uffbe\013\uffbe\015\uffbe\016\133\017\uffbe\020\uffbe\021" +
    "\uffbe\022\134\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\040\uffbe\001\002\000\040\007" +
    "\uffc3\013\uffc3\015\127\017\uffc3\020\uffc3\021\130\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\040\uffc3\001\002\000\034\007\uffca\013\uffca\017\123" +
    "\020\124\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\040\uffca\001\002\000\034\007\uffc6" +
    "\013\uffc6\017\123\020\124\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\040\uffc6\001\002" +
    "\000\034\007\uffc7\013\uffc7\017\123\020\124\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\040\uffc7\001\002\000\034\007\uffc8\013\uffc8\017\123\020" +
    "\124\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\040\uffc8\001\002\000\034\007\uffc9\013" +
    "\uffc9\017\123\020\124\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\040\uffc9\001\002\000" +
    "\032\004\071\006\067\007\151\014\044\020\047\033\053" +
    "\034\057\035\062\036\052\037\051\046\072\047\066\001" +
    "\002\000\006\007\154\013\153\001\002\000\010\007\uffee" +
    "\013\uffee\032\101\001\002\000\046\005\ufff0\007\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\040\ufff0\001\002\000\046\005\uffac\007\uffac" +
    "\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\040\uffac\001\002\000\030\004\071\006" +
    "\067\014\044\020\047\033\053\034\057\035\062\036\052" +
    "\037\051\046\072\047\066\001\002\000\046\005\ufff1\007" +
    "\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\040\ufff1\001\002\000\010\007\uffef" +
    "\013\uffef\032\101\001\002\000\046\005\uffb7\007\uffb7\013" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\040\uffb7\001\002\000\030\004\071\006\067" +
    "\014\044\020\047\033\053\034\057\035\062\036\052\037" +
    "\051\046\072\047\066\001\002\000\006\007\161\032\101" +
    "\001\002\000\004\010\162\001\002\000\034\034\024\041" +
    "\013\042\031\043\021\044\033\045\022\050\027\051\015" +
    "\052\032\054\011\055\014\056\034\057\010\001\002\000" +
    "\036\011\165\034\024\041\013\042\031\043\021\044\033" +
    "\045\022\050\027\051\015\052\032\054\011\055\014\056" +
    "\034\057\010\001\002\000\040\002\uffe7\011\uffe7\034\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\001\002" +
    "\000\042\002\uffe5\011\uffe5\034\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\050\uffe5\051\uffe5\052\uffe5\053\166" +
    "\054\uffe5\055\uffe5\056\uffe5\057\uffe5\001\002\000\006\010" +
    "\170\052\032\001\002\000\040\002\uffe3\011\uffe3\034\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\001\002" +
    "\000\034\034\024\041\013\042\031\043\021\044\033\045" +
    "\022\050\027\051\015\052\032\054\011\055\014\056\034" +
    "\057\010\001\002\000\040\002\uffe6\011\uffe6\034\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\001\002\000" +
    "\036\011\173\034\024\041\013\042\031\043\021\044\033" +
    "\045\022\050\027\051\015\052\032\054\011\055\014\056" +
    "\034\057\010\001\002\000\040\002\uffe4\011\uffe4\034\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\001\002" +
    "\000\010\006\177\012\176\040\200\001\002\000\064\002" +
    "\uffde\004\uffde\006\uffde\011\uffde\014\uffde\020\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\052\uffde\054\uffde\055\uffde\056\uffde\057\uffde\001\002\000" +
    "\030\004\071\006\067\014\044\020\047\033\053\034\057" +
    "\035\062\036\052\037\051\046\072\047\066\001\002\000" +
    "\020\007\203\041\013\042\031\043\021\044\033\045\022" +
    "\050\027\001\002\000\064\002\uffdc\004\uffdc\006\uffdc\011" +
    "\uffdc\014\uffdc\020\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\001\002\000\004\034\217\001\002\000" +
    "\040\002\uffed\011\uffed\034\uffed\041\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\050\uffed\051\uffed\052\uffed\054\uffed\055" +
    "\uffed\056\uffed\057\uffed\001\002\000\004\010\214\001\002" +
    "\000\006\007\206\013\205\001\002\000\016\041\013\042" +
    "\031\043\021\044\033\045\022\050\027\001\002\000\004" +
    "\010\207\001\002\000\034\034\024\041\013\042\031\043" +
    "\021\044\033\045\022\050\027\051\015\052\032\054\011" +
    "\055\014\056\034\057\010\001\002\000\036\011\211\034" +
    "\024\041\013\042\031\043\021\044\033\045\022\050\027" +
    "\051\015\052\032\054\011\055\014\056\034\057\010\001" +
    "\002\000\040\002\uffeb\011\uffeb\034\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\050\uffeb\051\uffeb\052\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\001\002\000\004\034\213" +
    "\001\002\000\006\007\uffea\013\uffea\001\002\000\034\034" +
    "\024\041\013\042\031\043\021\044\033\045\022\050\027" +
    "\051\015\052\032\054\011\055\014\056\034\057\010\001" +
    "\002\000\036\011\216\034\024\041\013\042\031\043\021" +
    "\044\033\045\022\050\027\051\015\052\032\054\011\055" +
    "\014\056\034\057\010\001\002\000\040\002\uffec\011\uffec" +
    "\034\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\050" +
    "\uffec\051\uffec\052\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\001\002\000\006\007\uffe9\013\uffe9\001\002\000\006\032" +
    "\101\040\221\001\002\000\064\002\uffdd\004\uffdd\006\uffdd" +
    "\011\uffdd\014\uffdd\020\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\001\002\000\004\017\227\001\002" +
    "\000\030\004\071\006\067\014\044\020\047\033\053\034" +
    "\057\035\062\036\052\037\051\046\072\047\066\001\002" +
    "\000\004\020\225\001\002\000\006\007\uffdf\040\uffdf\001" +
    "\002\000\010\007\uffe1\032\101\040\uffe1\001\002\000\006" +
    "\007\uffe0\040\uffe0\001\002\000\040\002\ufffd\011\ufffd\034" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001" +
    "\002\000\030\004\071\006\067\014\044\020\047\033\053" +
    "\034\057\035\062\036\052\037\051\046\072\047\066\001" +
    "\002\000\006\007\233\032\101\001\002\000\004\040\234" +
    "\001\002\000\040\002\uffe2\011\uffe2\034\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\001\002\000\004\006" +
    "\236\001\002\000\032\004\071\006\067\007\151\014\044" +
    "\020\047\033\053\034\057\035\062\036\052\037\051\046" +
    "\072\047\066\001\002\000\004\040\240\001\002\000\040" +
    "\002\ufff2\011\ufff2\034\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\050\ufff2\051\ufff2\052\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\001\002\000\030\004\071\006\067\014" +
    "\044\020\047\033\053\034\057\035\062\036\052\037\051" +
    "\046\072\047\066\001\002\000\006\007\243\032\101\001" +
    "\002\000\004\010\244\001\002\000\034\034\024\041\013" +
    "\042\031\043\021\044\033\045\022\050\027\051\015\052" +
    "\032\054\011\055\014\056\034\057\010\001\002\000\036" +
    "\011\246\034\024\041\013\042\031\043\021\044\033\045" +
    "\022\050\027\051\015\052\032\054\011\055\014\056\034" +
    "\057\010\001\002\000\040\002\uffe8\011\uffe8\034\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\001\002\000" +
    "\016\041\013\042\031\043\021\044\033\045\022\050\027" +
    "\001\002\000\004\034\262\001\002\000\030\004\071\006" +
    "\067\014\044\020\047\033\053\034\057\035\062\036\052" +
    "\037\051\046\072\047\066\001\002\000\006\032\101\040" +
    "\253\001\002\000\004\034\254\001\002\000\010\012\223" +
    "\017\222\020\224\001\002\000\004\007\256\001\002\000" +
    "\004\010\257\001\002\000\034\034\024\041\013\042\031" +
    "\043\021\044\033\045\022\050\027\051\015\052\032\054" +
    "\011\055\014\056\034\057\010\001\002\000\036\011\261" +
    "\034\024\041\013\042\031\043\021\044\033\045\022\050" +
    "\027\051\015\052\032\054\011\055\014\056\034\057\010" +
    "\001\002\000\040\002\ufff4\011\ufff4\034\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002\000\006\012" +
    "\176\040\200\001\002\000\040\002\ufff7\011\ufff7\034\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\034\002\005\003\016\004\022\005\027\007" +
    "\024\030\003\031\017\034\015\035\025\040\004\043\006" +
    "\044\011\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\037\004\022\005\027\007\024\030\003" +
    "\031\017\034\015\035\025\040\004\043\006\044\011\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\002\036\003\016\004\022\005" +
    "\027\007\024\030\003\031\017\034\015\035\025\040\004" +
    "\043\006\044\011\045\034\001\001\000\032\003\037\004" +
    "\022\005\027\007\024\030\003\031\017\034\015\035\025" +
    "\040\004\043\006\044\011\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\067" +
    "\011\047\012\044\013\063\014\062\016\054\020\060\021" +
    "\057\024\055\025\053\026\064\043\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\155\025\053\026\064\043\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\131\001\001\000\004\022" +
    "\125\001\001\000\002\001\001\000\004\015\113\001\001" +
    "\000\022\014\110\016\054\020\060\021\057\024\055\025" +
    "\053\026\064\043\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\010\105\011\047\012\044\013\063\014" +
    "\062\016\054\020\060\021\057\024\055\025\053\026\064" +
    "\043\045\001\001\000\002\001\001\000\012\025\053\026" +
    "\073\027\072\043\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\053\026\076\043" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\011\101\012\044\013\063\014\062\016" +
    "\054\020\060\021\057\024\055\025\053\026\064\043\045" +
    "\001\001\000\002\001\001\000\026\012\103\013\063\014" +
    "\062\016\054\020\060\021\057\024\055\025\053\026\064" +
    "\043\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\113\001\001\000\020\016\144\020\060\021\057\024" +
    "\055\025\053\026\064\043\045\001\001\000\020\016\143" +
    "\020\060\021\057\024\055\025\053\026\064\043\045\001" +
    "\001\000\002\001\001\000\020\016\142\020\060\021\057" +
    "\024\055\025\053\026\064\043\045\001\001\000\020\016" +
    "\141\020\060\021\057\024\055\025\053\026\064\043\045" +
    "\001\001\000\020\016\140\020\060\021\057\024\055\025" +
    "\053\026\064\043\045\001\001\000\020\016\120\020\060" +
    "\021\057\024\055\025\053\026\064\043\045\001\001\000" +
    "\004\017\121\001\001\000\002\001\001\000\016\020\137" +
    "\021\057\024\055\025\053\026\064\043\045\001\001\000" +
    "\016\020\124\021\057\024\055\025\053\026\064\043\045" +
    "\001\001\000\004\022\125\001\001\000\002\001\001\000" +
    "\014\021\136\024\055\025\053\026\064\043\045\001\001" +
    "\000\014\021\130\024\055\025\053\026\064\043\045\001" +
    "\001\000\004\023\131\001\001\000\002\001\001\000\012" +
    "\024\135\025\053\026\064\043\045\001\001\000\012\024" +
    "\134\025\053\026\064\043\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\131\001\001\000\004\022" +
    "\125\001\001\000\004\017\121\001\001\000\004\017\121" +
    "\001\001\000\004\017\121\001\001\000\004\017\121\001" +
    "\001\000\004\017\121\001\001\000\036\010\147\011\047" +
    "\012\044\013\063\014\062\016\054\020\060\021\057\024" +
    "\055\025\053\026\064\041\151\042\146\043\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\154\011\047\012\044\013\063" +
    "\014\062\016\054\020\060\021\057\024\055\025\053\026" +
    "\064\043\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\157\011\047\012\044\013" +
    "\063\014\062\016\054\020\060\021\057\024\055\025\053" +
    "\026\064\043\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\162\003\016\004\022\005\027\007\024" +
    "\030\003\031\017\034\015\035\025\040\004\043\006\044" +
    "\011\045\034\001\001\000\034\003\037\004\022\005\027" +
    "\007\024\030\003\031\017\032\163\034\015\035\025\040" +
    "\004\043\006\044\011\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\166\033\170\001\001\000" +
    "\002\001\001\000\034\002\171\003\016\004\022\005\027" +
    "\007\024\030\003\031\017\034\015\035\025\040\004\043" +
    "\006\044\011\045\034\001\001\000\002\001\001\000\032" +
    "\003\037\004\022\005\027\007\024\030\003\031\017\034" +
    "\015\035\025\040\004\043\006\044\011\045\034\001\001" +
    "\000\002\001\001\000\004\006\174\001\001\000\002\001" +
    "\001\000\032\010\217\011\047\012\044\013\063\014\062" +
    "\016\054\020\060\021\057\024\055\025\053\026\064\043" +
    "\045\001\001\000\010\007\200\036\201\037\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\211\001\001" +
    "\000\002\001\001\000\034\002\207\003\016\004\022\005" +
    "\027\007\024\030\003\031\017\034\015\035\025\040\004" +
    "\043\006\044\011\045\034\001\001\000\032\003\037\004" +
    "\022\005\027\007\024\030\003\031\017\034\015\035\025" +
    "\040\004\043\006\044\011\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\214" +
    "\003\016\004\022\005\027\007\024\030\003\031\017\034" +
    "\015\035\025\040\004\043\006\044\011\045\034\001\001" +
    "\000\032\003\037\004\022\005\027\007\024\030\003\031" +
    "\017\034\015\035\025\040\004\043\006\044\011\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\225" +
    "\011\047\012\044\013\063\014\062\016\054\020\060\021" +
    "\057\024\055\025\053\026\064\043\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\010\231\011\047\012\044" +
    "\013\063\014\062\016\054\020\060\021\057\024\055\025" +
    "\053\026\064\043\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\010" +
    "\147\011\047\012\044\013\063\014\062\016\054\020\060" +
    "\021\057\024\055\025\053\026\064\041\236\042\146\043" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\241\011\047\012\044\013\063\014\062\016\054\020" +
    "\060\021\057\024\055\025\053\026\064\043\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\244\003" +
    "\016\004\022\005\027\007\024\030\003\031\017\034\015" +
    "\035\025\040\004\043\006\044\011\045\034\001\001\000" +
    "\032\003\037\004\022\005\027\007\024\030\003\031\017" +
    "\034\015\035\025\040\004\043\006\044\011\045\034\001" +
    "\001\000\002\001\001\000\006\005\250\007\247\001\001" +
    "\000\002\001\001\000\032\010\251\011\047\012\044\013" +
    "\063\014\062\016\054\020\060\021\057\024\055\025\053" +
    "\026\064\043\045\001\001\000\002\001\001\000\004\004" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\257\003\016\004\022\005\027\007" +
    "\024\030\003\031\017\034\015\035\025\040\004\043\006" +
    "\044\011\045\034\001\001\000\032\003\037\004\022\005" +
    "\027\007\024\030\003\031\017\034\015\035\025\040\004" +
    "\043\006\044\011\045\034\001\001\000\002\001\001\000" +
    "\004\006\174\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        arbol resultado;

        public arbol getArbol(){
                return resultado;
        }

        ArrayList<tablaJson> tablaS = new ArrayList();

        public ArrayList getTablaS(){
                return tablaS;
        }

        public void syntax_error(Symbol s){
	        System.out.println("Sintax error: " +s.value + " en la línea " + s.right+ " en la columna " + s.left);
        }

        public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
	        System.out.println("Sintax error: " +s.value + " en la línea " + s.right+" en la columna " + s.left);
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instrucciones ::= instrucciones instruccion 
            {
              arbol RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol a1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a1);
                        instrucciones.añadirHijo(a2);
                RESULT=instrucciones;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a);
                RESULT=instrucciones;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= declaracion1 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= asignacion PUNTOCOMA 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                        instruccion.añadirHijo(new arbol(pc));
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= sImprimir 
            {
              arbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol a = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= sIf 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= senWhile 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= lf1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= llamadaFM 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= callFunc PUNTOCOMA 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                instruccion.añadirHijo(new arbol(puntocoma));
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= senDoWhile 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= senFor 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // senFor ::= RFOR PAR_IZQ declaracion1 expLog PUNTOCOMA asignacion PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int for1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int for1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String for1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		arbol dec1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int asig1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asig1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol asig1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol senFor = new arbol("senFor");
               
                senFor.añadirHijo(new arbol(for1));
                senFor.añadirHijo(new arbol(parI));
                
                //dec1.setAct(false);
                senFor.añadirHijo(dec1);

                senFor.añadirHijo(v1);
                senFor.añadirHijo(new arbol(pc));
                asig1.setAct(false);
                senFor.añadirHijo(asig1);
                
                senFor.añadirHijo(new arbol(parD));

                senFor.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senFor.añadirHijo(ins1);
                senFor.añadirHijo(new arbol(llD));

                RESULT= senFor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senFor",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // senDoWhile ::= RDO LL_IZQ instrucciones LL_DER RWHILE PAR_IZQ expLog PAR_DER PUNTOCOMA 
            {
              arbol RESULT =null;
		int do1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int do1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String do1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int while1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int while1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String while1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol senDoWhile = new arbol("senDoWhile");
               
                senDoWhile.añadirHijo(new arbol(do1));
                senDoWhile.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senDoWhile.añadirHijo(ins1);
                senDoWhile.añadirHijo(new arbol(llD));

                senDoWhile.añadirHijo(new arbol(while1));

                senDoWhile.añadirHijo(new arbol(parI));
                senDoWhile.añadirHijo(v1);
                senDoWhile.añadirHijo(new arbol(parD));
                senDoWhile.añadirHijo(new arbol(puntocoma));
                

                RESULT= senDoWhile;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senDoWhile",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // llamadaFM ::= REJECUTAR ID PAR_IZQ lenviarParam PUNTOCOMA 
            {
              arbol RESULT =null;
		int ejecutarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ejecutarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ejecutar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol llamadaFM = new arbol("llamadaFM");

                llamadaFM.añadirHijo(new arbol(ejecutar));
                llamadaFM.añadirHijo(new arbol(id));
                llamadaFM.añadirHijo(new arbol(parI));
                llamadaFM.añadirHijo(parametros);
                llamadaFM.añadirHijo(new arbol(puntocoma));
                RESULT=llamadaFM;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFM",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lenviarParam ::= lenviarParam1 PAR_DER 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol lenviarParam = new arbol("lenviarParam");
                
                lenviarParam.añadirHijo(v1);
                lenviarParam.añadirHijo(new arbol(parD));
               
                
                RESULT=lenviarParam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lenviarParam ::= PAR_DER 
            {
              arbol RESULT =null;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol lenviarParam = new arbol("lenviarParam");
                
                
                lenviarParam.añadirHijo(new arbol(parD));
                
                
                RESULT=lenviarParam;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lenviarParam1 ::= lenviarParam1 COMA expLog 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lenviarParam1 = new arbol("lenviarParam1");

                lenviarParam1.añadirHijo(parametros);
                lenviarParam1.añadirHijo(new arbol(coma));
                
                lenviarParam1.añadirHijo(v1);
               

                RESULT= lenviarParam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lenviarParam1 ::= expLog 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lenviarParam1 = new arbol("lenviarParam1");

                
                lenviarParam1.añadirHijo(v1);
               

                RESULT= lenviarParam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lenviarParam1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lf1 ::= varTipo ID PAR_IZQ lparam 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lf1 = new arbol("lf1");
               
                lf1.añadirHijo(tipo);
                lf1.añadirHijo(new arbol(id));
                lf1.añadirHijo(new arbol(parI));
                
                lf1.añadirHijo(parametros);

                RESULT= lf1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lf1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lparam ::= PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam = new arbol("lparam");
               
                lparam.añadirHijo(new arbol(parD));
                lparam.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                lparam.añadirHijo(ins1);
                lparam.añadirHijo(new arbol(llD));
                
                
                

                RESULT= lparam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lparam ::= lparam1 PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam = new arbol("lparam");

                lparam.añadirHijo(parametros);
                lparam.añadirHijo(new arbol(parD));
                lparam.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                lparam.añadirHijo(ins1);
                lparam.añadirHijo(new arbol(llD));
                
                
                

                RESULT= lparam;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lparam1 ::= lparam1 COMA varTipo ID 
            {
              arbol RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String coma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam1 = new arbol("lparam1");

                lparam1.añadirHijo(parametros);
                lparam1.añadirHijo(new arbol(coma));
                lparam1.añadirHijo(tipo);
                lparam1.añadirHijo(new arbol(id));
               

                RESULT= lparam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lparam1 ::= varTipo ID 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol lparam1 = new arbol("lparam1");

               
                lparam1.añadirHijo(tipo);
                lparam1.añadirHijo(new arbol(id));
               

                RESULT= lparam1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lparam1",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // senWhile ::= RWHILE PAR_IZQ expLog PAR_DER LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int while1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int while1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String while1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol senWhile = new arbol("senWhile");
               
                senWhile.añadirHijo(new arbol(while1));
                senWhile.añadirHijo(new arbol(parI));
                senWhile.añadirHijo(v1);
                senWhile.añadirHijo(new arbol(parD));
                senWhile.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senWhile.añadirHijo(ins1);
                senWhile.añadirHijo(new arbol(llD));

                RESULT= senWhile;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("senWhile",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sIf ::= RIF PAR_IZQ expLog PAR_DER LL_IZQ instrucciones sIf2 
            {
              arbol RESULT =null;
		int if1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int if1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String if1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ins1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ins1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol ins1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int if2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int if2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol if2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sIf = new arbol("sIf");
               
                sIf.añadirHijo(new arbol(if1));
                sIf.añadirHijo(new arbol(parI));
                sIf.añadirHijo(v1);
                sIf.añadirHijo(new arbol(parD));
                sIf.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                sIf.añadirHijo(ins1);
                sIf.añadirHijo(if2);

                RESULT= sIf;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sIf2 ::= LL_DER RELSE elsePrima 
            {
              arbol RESULT =null;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int else1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int else1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String else1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sIf2 = new arbol("sIf2");
               
                sIf2.añadirHijo(new arbol(llD));
                
                sIf2.añadirHijo(new arbol(else1));
                sIf2.añadirHijo(v1);
               


                RESULT= sIf2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sIf2 ::= LL_DER 
            {
              arbol RESULT =null;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol sIf2 = new arbol("sIf2");
                sIf2.añadirHijo(new arbol(llD));
                RESULT=sIf2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sIf2",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // elsePrima ::= LL_IZQ instrucciones LL_DER 
            {
              arbol RESULT =null;
		int llIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String llI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int llDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String llD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol elsePrima = new arbol("elsePrima");
               
                elsePrima.añadirHijo(new arbol(llI));
                v1.setAct(false);
                elsePrima.añadirHijo(v1);
                elsePrima.añadirHijo(new arbol(llD));
               


                RESULT= elsePrima;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePrima",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elsePrima ::= sIf 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol elsePrima = new arbol("elsePrima");
                elsePrima.añadirHijo(v1);
                RESULT=elsePrima;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePrima",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sImprimir ::= RIMPRIMIR PAR_IZQ expLog PAR_DER PUNTOCOMA 
            {
              arbol RESULT =null;
		int imprimirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int imprimirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String imprimir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int puntocomaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntocomaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String puntocoma = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                
                arbol sImprimir = new arbol("sImprimir");
                sImprimir.añadirHijo(new arbol(imprimir));
                sImprimir.añadirHijo(new arbol(parI));
                sImprimir.añadirHijo(v1);
                sImprimir.añadirHijo(new arbol(parD));
                sImprimir.añadirHijo(new arbol(puntocoma));


                RESULT= sImprimir;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sImprimir",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignacion ::= ID IGUAL expLog 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String igual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(igual));
                                                asignacion.añadirHijo(v1);
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacion ::= ID MAS MAS 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mas1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mas1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mas1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mas2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mas2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mas2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(mas1));
                                                asignacion.añadirHijo(new arbol(mas2));
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // asignacion ::= ID MENOS MENOS 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int menos1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menos1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int menos2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int menos2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String menos2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(menos1));
                                                asignacion.añadirHijo(new arbol(menos2));
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion1 ::= varTipo ID declaracion2 
            {
              arbol RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol tipo = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol dec2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion1 = new arbol("declaracion1");
                        
                       
                                                declaracion1.añadirHijo(tipo);
                                                declaracion1.añadirHijo(new arbol(id));
                                                declaracion1.añadirHijo(dec2);
                                                
                        
                                                RESULT=declaracion1;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion2 ::= IGUAL expLog PUNTOCOMA 
            {
              arbol RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String igual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion2 = new arbol("declaracion2");
                        
                       
                                                declaracion2.añadirHijo(new arbol(igual));
                                                declaracion2.añadirHijo(v1);
                                                declaracion2.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=declaracion2;
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion2 ::= PUNTOCOMA 
            {
              arbol RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol declaracion2 = new arbol("declaracion2");
                        declaracion2.añadirHijo(new arbol(pc));
                RESULT=declaracion2;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varTipo ::= RSTRING 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varTipo ::= RDOUBLE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // varTipo ::= RINT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // varTipo ::= RCHAR 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // varTipo ::= RBOOL 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // varTipo ::= RVOID 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expLog ::= expLog OR expLog1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog = new arbol("expLog");
                        
                       
                        expLog.añadirHijo(v1);
                        expLog.añadirHijo(new arbol(or));
                        expLog.añadirHijo(v2);
                        
                        RESULT=expLog;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expLog ::= expLog1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog = new arbol("expLog");
                        
        expLog.añadirHijo(v1);
                        
        RESULT=expLog;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expLog1 ::= expLog1 AND expLog2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String and = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog1 = new arbol("expLog1");
                        
                       
                        expLog1.añadirHijo(v1);
                        expLog1.añadirHijo(new arbol(and));
                        expLog1.añadirHijo(v2);
                        
                        RESULT=expLog1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expLog1 ::= expLog2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog1 = new arbol("expLog1");
                        
        expLog1.añadirHijo(v1);
                        
        RESULT=expLog1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expLog2 ::= expNot expRel 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog2 = new arbol("expLog2");
                        
                       
                        expLog2.añadirHijo(v1);
                        expLog2.añadirHijo(v2);
                        
                        RESULT=expLog2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expLog2 ::= expRel 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expLog2 = new arbol("expLog2");
                        
        expLog2.añadirHijo(v1);
                        
        RESULT=expLog2;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expLog2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expNot ::= expNot NOT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expNot = new arbol("expNot");
                        
                       
                        expNot.añadirHijo(v1);
                        expNot.añadirHijo(new arbol(not));
                        
                        RESULT=expNot;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNot",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expNot ::= NOT 
            {
              arbol RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expNot = new arbol("expNot");
                        
        expNot.añadirHijo(new arbol(not));
                        
        RESULT=expNot;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expNot",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expRel ::= expRel expRel1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel = new arbol("expRel");
                        
                       
                        expRel.añadirHijo(v1);
                        expRel.añadirHijo(v2);
                        
                        RESULT=expRel;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expRel ::= expArit 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel = new arbol("expRel");
                        
                        expRel.añadirHijo(v1);
                        
                        RESULT=expRel;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expRel1 ::= MAYOR expArit 
            {
              arbol RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mayor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expRel1 ::= MENOR expArit 
            {
              arbol RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expRel1 ::= MAYORIGUAL expArit 
            {
              arbol RESULT =null;
		int mayorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mayorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mayorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expRel1 ::= MENORIGUAL expArit 
            {
              arbol RESULT =null;
		int menorigualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menorigualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menorigual = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expRel1 ::= EQUIVALENTE expArit 
            {
              arbol RESULT =null;
		int equivalenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int equivalenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String equivalente = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(equivalente));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expRel1 ::= DISTINTO expArit 
            {
              arbol RESULT =null;
		int distintoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distintoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String distinto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(distinto));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expArit ::= expArit expArit2 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        expArit.añadirHijo(v2);

                        RESULT=expArit;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expArit ::= expArit3 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        
                        RESULT=expArit;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expArit2 ::= MAS expArit3 
            {
              arbol RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int masright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(mas));
                        expArit2.añadirHijo(v1);
                        
                        RESULT=expArit2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expArit2 ::= MENOS expArit3 
            {
              arbol RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(menos));
                        expArit2.añadirHijo(v2);
                        
                        RESULT=expArit2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expArit3 ::= expArit3 expArit3Prima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        expArit3.añadirHijo(v2);
                        
                        RESULT=expArit3;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expArit3 ::= expArit4 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        RESULT=expArit3;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expArit3Prima ::= POR expArit4 
            {
              arbol RESULT =null;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String por = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(por));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3Prima",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expArit3Prima ::= POTENCIA expArit4 
            {
              arbol RESULT =null;
		int potencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int potenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String potencia = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(potencia));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit3Prima",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expArit4 ::= expArit4 expArit4Prima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v2 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        expArit4.añadirHijo(v2);
                        
                        RESULT=expArit4;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expArit4 ::= expPrima 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        RESULT=expArit4;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expArit4Prima ::= DIV expPrima 
            {
              arbol RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(div));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4Prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expArit4Prima ::= MODULO expPrima 
            {
              arbol RESULT =null;
		int moduloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moduloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String modulo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(modulo));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expArit4Prima",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expPrima ::= PAR_IZQ expLog PAR_DER 
            {
              arbol RESULT =null;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String parD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expPrima = new arbol("expPrima");
                                        expPrima.añadirHijo(new arbol(parI));
                                        expPrima.añadirHijo(v1);
                                        expPrima.añadirHijo(new arbol(parD));
                                        RESULT=expPrima;
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPrima",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expPrima ::= valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol expPrima = new arbol("expPrima");
                        expPrima.añadirHijo(v1);
                RESULT=expPrima;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expPrima",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valor1 ::= MENOS expPrima 
            {
              arbol RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor1 = new arbol("valor1");
                                        valor1.añadirHijo(new arbol(menos));
                                        valor1.añadirHijo(v1);

                                        RESULT=valor1;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // valor1 ::= valor 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor1 = new arbol("valor1");
                        valor1.añadirHijo(v1);
                RESULT=valor1;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valor ::= STRING 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valor ::= INT 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valor ::= DECIMAL 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valor ::= ID 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valorId");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= COR_IZQ datoArray COR_DER 
            {
              arbol RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor ::= RTRUE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor ::= RFALSE 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= TCHAR 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor ::= callFunc 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol valor = new arbol("valor");
                        valor.añadirHijo(v1);
                RESULT=valor;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // callFunc ::= ID PAR_IZQ lenviarParam 
            {
              arbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String parI = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol parametros = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol callFunc = new arbol("callFunc");

               
                callFunc.añadirHijo(new arbol(id));
                callFunc.añadirHijo(new arbol(parI));
                callFunc.añadirHijo(parametros);
                RESULT=callFunc;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callFunc",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // datoArray ::= datoArray COMA valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v3 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                        datoArray.añadirHijo(new arbol(v2));
                        datoArray.añadirHijo(v3);
                RESULT=datoArray;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datoArray",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // datoArray ::= valor1 
            {
              arbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		arbol v1 = (arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                RESULT=datoArray;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("datoArray",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
