package analizador;
import java_cup.runtime.*;
import java.util.ArrayList;
import structuras.tablaJson;
import structuras.fallos;

import structuras.arbol;

parser code
{:

        arbol resultado;
        public ArrayList<fallos> listaErrores = new ArrayList();

        public arbol getArbol(){
                return resultado;
        }

        public ArrayList<fallos> getErrores(){
                return listaErrores;
        }

        ArrayList<tablaJson> tablaS = new ArrayList();

        public ArrayList getTablaS(){
                return tablaS;
        }

        public void syntax_error(Symbol s){
	        System.out.println("Sintax error: " +s.value + " en la columna " + s.right+ " en la linea " + s.left);
                listaErrores.add(new fallos(String.valueOf(s.value),"Error Sintax",s.left,s.right));
        }

        public void unrecovered_syntax_error(Symbol s)throws java.lang.Exception{
	        System.out.println("Sintax error: " +s.value + " en la columna " + s.right+" en la linea " + s.left);
                listaErrores.add(new fallos(String.valueOf(s.value),"Error Lexico",s.left,s.right));
        }

:}

//Terminales

terminal String COR_IZQ,COR_DER,PAR_IZQ,PAR_DER,LL_IZQ,LL_DER;
terminal String IGUAL,COMA,TCHAR,POTENCIA,MODULO;
terminal String MAS,MENOS, POR,DIV,MAYOR,MENOR,MAYORIGUAL,MENORIGUAL,EQUIVALENTE,DISTINTO;
terminal String AND,OR,NOT;
terminal String ID,STRING,DECIMAL,INT;
terminal String PUNTOCOMA;
terminal String RSTRING,RDOUBLE,RINT,RCHAR,RBOOL,RTRUE,RFALSE,RVOID;
terminal String RIMPRIMIR,RIF,RELSE,RWHILE,REJECUTAR,RDO,RFOR,RSWITCH,RCASE,RDEFAULT,DOSPUNTOS;
terminal String RBREAK,RCONTINUE,RRETURN;




//no terminales


non terminal arbol instrucciones;
non terminal arbol instruccion;


non terminal arbol asignacion;

non terminal arbol declaracion1;
non terminal arbol declaracion2;


non terminal arbol varTipo;

non terminal arbol expLog;
non terminal arbol expLog1;
non terminal arbol expLog2;
non terminal arbol expNot;

non terminal arbol expRel;
non terminal arbol expRel1;

non terminal arbol expArit;
non terminal arbol expArit2;
non terminal arbol expArit3;
non terminal arbol expArit4;

non terminal arbol expArit3Prima;
non terminal arbol expArit4Prima;

non terminal arbol expPrima;


non terminal arbol valor;
non terminal arbol valor1;
non terminal arbol datoArray;

non terminal arbol sImprimir;

non terminal arbol sIf,sIf2,elsePrima;

non terminal arbol senWhile;

non terminal arbol lf1,lparam,lparam1;

non terminal arbol llamadaFM,lenviarParam,lenviarParam1,callFunc;

non terminal arbol senDoWhile,senFor;

non terminal arbol senSwitch,listCase,listCase1;

non terminal arbol senReturn;




//precendencia

//precedence left else,elseif



//producciones

start with instrucciones;





instrucciones::= instrucciones:a1 instruccion:a2 {: arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a1);
                        instrucciones.añadirHijo(a2);
                RESULT=instrucciones;
                :}
                |instruccion:a {: arbol instrucciones = new arbol("instrucciones");
                        instrucciones.añadirHijo(a);
                RESULT=instrucciones;
                :}
                
;

instruccion::= declaracion1:a {: arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                :}
        |asignacion:a PUNTOCOMA:pc{: arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                        instruccion.añadirHijo(new arbol(pc));
                RESULT=instruccion;
                :}
        |sImprimir:a {: arbol instruccion = new arbol("instruccion");
                        instruccion.añadirHijo(a);
                RESULT=instruccion;
                :}
        |sIf:v1 {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        :}
        |senWhile:v1 {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        :}
        |lf1:v1 {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        :}
        |llamadaFM:v1 {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                RESULT=instruccion;
        :}
        |callFunc:v1 PUNTOCOMA:puntocoma{: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                instruccion.añadirHijo(new arbol(puntocoma));
                RESULT=instruccion;
        :}
        |senDoWhile:v1 {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        :}
        |senFor:v1 {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        :}
        |senSwitch:v1 {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        :}
        |RCONTINUE:continue1 PUNTOCOMA:pc {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(new arbol(continue1));
                instruccion.añadirHijo(new arbol(pc));
                
                RESULT=instruccion;
        :}

        |RBREAK:break1 PUNTOCOMA:pc {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(new arbol(break1));
                instruccion.añadirHijo(new arbol(pc));
                
                RESULT=instruccion;
        :}

        |senReturn:v1 {: arbol instruccion = new arbol("instruccion");
                instruccion.añadirHijo(v1);
                
                RESULT=instruccion;
        :}
; 

senReturn ::= RRETURN:return1 PUNTOCOMA:pc {: arbol senReturn = new arbol("senReturn");
                senReturn.añadirHijo(new arbol(return1));
                senReturn.añadirHijo(new arbol(pc));
                
                RESULT=senReturn;
        :}
        |RRETURN:return1 expLog:v1 PUNTOCOMA:pc {: arbol senReturn = new arbol("senReturn");
                senReturn.añadirHijo(new arbol(return1));
                senReturn.añadirHijo(v1);
                senReturn.añadirHijo(new arbol(pc));
                
                RESULT=senReturn;
        :}
;

senSwitch ::= RSWITCH:switch1 PAR_IZQ:parI ID:id PAR_DER:parD LL_IZQ:llI listCase:listaCasos LL_DER:llD {: 
                
                arbol senSwitch = new arbol("senSwitch");
               
                senSwitch.añadirHijo(new arbol(switch1));
                senSwitch.añadirHijo(new arbol(parI));
                senSwitch.añadirHijo(new arbol(id));
                senSwitch.añadirHijo(new arbol(parD));
                //dec1.setAct(false);
                senSwitch.añadirHijo(new arbol(llI));

                senSwitch.añadirHijo(listaCasos);
                senSwitch.añadirHijo(new arbol(llD));
                
                
             
                RESULT= senSwitch;
                :}

;

listCase::= listCase:v1 listCase1:v2 {: 
                
                arbol listCase = new arbol("listCase");
                        
                listCase.añadirHijo(v1);
                listCase.añadirHijo(v2);
                
                RESULT= listCase;
                :}
        |listCase1:v1 {: 
                
                arbol listCase = new arbol("listCase");            
            
                listCase.añadirHijo(v1);
             
                RESULT= listCase;
                :}
;

listCase1::= RCASE:caso1 expLog:v1 DOSPUNTOS:dosP instrucciones:ins1 {: 
                
                arbol listCase1 = new arbol("listCase1");
               
                listCase1.añadirHijo(new arbol(caso1));
                
                
               

                listCase1.añadirHijo(v1);
                listCase1.añadirHijo(new arbol(dosP));
         
                
             
                ins1.setAct(false);
                listCase1.añadirHijo(ins1);
                

                RESULT= listCase1;
                :}
        |RDEFAULT:default1 DOSPUNTOS:dosP instrucciones:ins1 {: 
                
                arbol listCase1 = new arbol("listCase1");
               
                listCase1.añadirHijo(new arbol(default1));
                
                
               

             
                listCase1.añadirHijo(new arbol(dosP));
         
                
             
                ins1.setAct(false);
                listCase1.añadirHijo(ins1);
                

                RESULT= listCase1;
                :}
        
;

senFor::= RFOR:for1 PAR_IZQ:parI declaracion1:dec1 expLog:v1 PUNTOCOMA:pc asignacion:asig1 PAR_DER:parD LL_IZQ:llI instrucciones:ins1 LL_DER:llD {: 
                
                arbol senFor = new arbol("senFor");
               
                senFor.añadirHijo(new arbol(for1));
                senFor.añadirHijo(new arbol(parI));
                
                //dec1.setAct(false);
                senFor.añadirHijo(dec1);

                senFor.añadirHijo(v1);
                senFor.añadirHijo(new arbol(pc));
                asig1.setAct(false);
                senFor.añadirHijo(asig1);
                
                senFor.añadirHijo(new arbol(parD));

                senFor.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senFor.añadirHijo(ins1);
                senFor.añadirHijo(new arbol(llD));

                RESULT= senFor;
                :}

;


senDoWhile::= RDO:do1 LL_IZQ:llI instrucciones:ins1 LL_DER:llD RWHILE:while1 PAR_IZQ:parI expLog:v1 PAR_DER:parD PUNTOCOMA:puntocoma {: 
                
                arbol senDoWhile = new arbol("senDoWhile");
               
                senDoWhile.añadirHijo(new arbol(do1));
                senDoWhile.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senDoWhile.añadirHijo(ins1);
                senDoWhile.añadirHijo(new arbol(llD));

                senDoWhile.añadirHijo(new arbol(while1));

                senDoWhile.añadirHijo(new arbol(parI));
                senDoWhile.añadirHijo(v1);
                senDoWhile.añadirHijo(new arbol(parD));
                senDoWhile.añadirHijo(new arbol(puntocoma));
                

                RESULT= senDoWhile;
                :}

;

llamadaFM::= REJECUTAR:ejecutar ID:id PAR_IZQ:parI lenviarParam:parametros PUNTOCOMA:puntocoma {: arbol llamadaFM = new arbol("llamadaFM");

                llamadaFM.añadirHijo(new arbol(ejecutar));
                llamadaFM.añadirHijo(new arbol(id));
                llamadaFM.añadirHijo(new arbol(parI));
                llamadaFM.añadirHijo(parametros);
                llamadaFM.añadirHijo(new arbol(puntocoma));
                RESULT=llamadaFM;
        :}
;

lenviarParam::= lenviarParam1:v1 PAR_DER:parD  {: arbol lenviarParam = new arbol("lenviarParam");
                
                lenviarParam.añadirHijo(v1);
                lenviarParam.añadirHijo(new arbol(parD));
               
                
                RESULT=lenviarParam;
                :}
                |PAR_DER:parD {: arbol lenviarParam = new arbol("lenviarParam");
                
                
                lenviarParam.añadirHijo(new arbol(parD));
                
                
                RESULT=lenviarParam;
        :}
                
;



lenviarParam1::= lenviarParam1:parametros COMA:coma expLog:v1 {: 
                
                arbol lenviarParam1 = new arbol("lenviarParam1");

                lenviarParam1.añadirHijo(parametros);
                lenviarParam1.añadirHijo(new arbol(coma));
                
                lenviarParam1.añadirHijo(v1);
               

                RESULT= lenviarParam1;
                :}
                |expLog:v1 {: 
                
                arbol lenviarParam1 = new arbol("lenviarParam1");

                
                lenviarParam1.añadirHijo(v1);
               

                RESULT= lenviarParam1;
                :}
; 


lf1::= varTipo:tipo ID:id PAR_IZQ:parI lparam:parametros {: 
                
                arbol lf1 = new arbol("lf1");
               
                lf1.añadirHijo(tipo);
                lf1.añadirHijo(new arbol(id));
                lf1.añadirHijo(new arbol(parI));
                
                lf1.añadirHijo(parametros);

                RESULT= lf1;
                :}
      
;

lparam::= PAR_DER:parD LL_IZQ:llI instrucciones:ins1 LL_DER:llD {: 
                
                arbol lparam = new arbol("lparam");
               
                lparam.añadirHijo(new arbol(parD));
                lparam.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                lparam.añadirHijo(ins1);
                lparam.añadirHijo(new arbol(llD));
                
                
                

                RESULT= lparam;
                :}

        |lparam1:parametros PAR_DER:parD LL_IZQ:llI instrucciones:ins1 LL_DER:llD {: 
                
                arbol lparam = new arbol("lparam");

                lparam.añadirHijo(parametros);
                lparam.añadirHijo(new arbol(parD));
                lparam.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                lparam.añadirHijo(ins1);
                lparam.añadirHijo(new arbol(llD));
                
                
                

                RESULT= lparam;
                :}
;

lparam1::= lparam1:parametros COMA:coma varTipo:tipo ID:id {: 
                
                arbol lparam1 = new arbol("lparam1");

                lparam1.añadirHijo(parametros);
                lparam1.añadirHijo(new arbol(coma));
                lparam1.añadirHijo(tipo);
                lparam1.añadirHijo(new arbol(id));
               

                RESULT= lparam1;
                :}
      

        |varTipo:tipo ID:id {: 
                
                arbol lparam1 = new arbol("lparam1");

               
                lparam1.añadirHijo(tipo);
                lparam1.añadirHijo(new arbol(id));
               

                RESULT= lparam1;
                :}
      

;


senWhile::= RWHILE:while1 PAR_IZQ:parI expLog:v1 PAR_DER:parD LL_IZQ:llI instrucciones:ins1 LL_DER:llD {: 
                
                arbol senWhile = new arbol("senWhile");
               
                senWhile.añadirHijo(new arbol(while1));
                senWhile.añadirHijo(new arbol(parI));
                senWhile.añadirHijo(v1);
                senWhile.añadirHijo(new arbol(parD));
                senWhile.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                senWhile.añadirHijo(ins1);
                senWhile.añadirHijo(new arbol(llD));

                RESULT= senWhile;
                :}


;

sIf::= RIF:if1 PAR_IZQ:parI expLog:v1 PAR_DER:parD LL_IZQ:llI instrucciones:ins1 sIf2:if2 {: 
                
                arbol sIf = new arbol("sIf");
               
                sIf.añadirHijo(new arbol(if1));
                sIf.añadirHijo(new arbol(parI));
                sIf.añadirHijo(v1);
                sIf.añadirHijo(new arbol(parD));
                sIf.añadirHijo(new arbol(llI));
                ins1.setAct(false);
                sIf.añadirHijo(ins1);
                sIf.añadirHijo(if2);

                RESULT= sIf;
                :}

;

sIf2 ::= LL_DER:llD RELSE:else1 elsePrima:v1 {: 
                
                arbol sIf2 = new arbol("sIf2");
               
                sIf2.añadirHijo(new arbol(llD));
                
                sIf2.añadirHijo(new arbol(else1));
                sIf2.añadirHijo(v1);
               


                RESULT= sIf2;
                :}


        |LL_DER:llD {: arbol sIf2 = new arbol("sIf2");
                sIf2.añadirHijo(new arbol(llD));
                RESULT=sIf2;
        :}
;

elsePrima ::= LL_IZQ:llI instrucciones:v1 LL_DER:llD {: 
                
                arbol elsePrima = new arbol("elsePrima");
               
                elsePrima.añadirHijo(new arbol(llI));
                v1.setAct(false);
                elsePrima.añadirHijo(v1);
                elsePrima.añadirHijo(new arbol(llD));
               


                RESULT= elsePrima;
                :}


        | sIf:v1 {: arbol elsePrima = new arbol("elsePrima");
                elsePrima.añadirHijo(v1);
                RESULT=elsePrima;
        :}
;

sImprimir::= RIMPRIMIR:imprimir PAR_IZQ:parI expLog:v1 PAR_DER:parD PUNTOCOMA:puntocoma {: 
                
                arbol sImprimir = new arbol("sImprimir");
                sImprimir.añadirHijo(new arbol(imprimir));
                sImprimir.añadirHijo(new arbol(parI));
                sImprimir.añadirHijo(v1);
                sImprimir.añadirHijo(new arbol(parD));
                sImprimir.añadirHijo(new arbol(puntocoma));


                RESULT= sImprimir;
                :}
;


asignacion::= ID:id IGUAL:igual expLog:v1 {: arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(igual));
                                                asignacion.añadirHijo(v1);
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                :}

                |ID:id MAS:mas1 MAS:mas2 {: arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(mas1));
                                                asignacion.añadirHijo(new arbol(mas2));
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                :}

                |ID:id MENOS:menos1 MENOS:menos2 {: arbol asignacion = new arbol("asignacion");
                        
                       
                                                
                                                asignacion.añadirHijo(new arbol(id));
                                                asignacion.añadirHijo(new arbol(menos1));
                                                asignacion.añadirHijo(new arbol(menos2));
                                                //asignacion.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=asignacion;
                                                :}

;



declaracion1 ::= varTipo:tipo ID:id declaracion2:dec2 {: arbol declaracion1 = new arbol("declaracion1");
                        
                       
                                                declaracion1.añadirHijo(tipo);
                                                declaracion1.añadirHijo(new arbol(id));
                                                declaracion1.añadirHijo(dec2);
                                                
                        
                                                RESULT=declaracion1;
                                                :}
;



declaracion2::= IGUAL:igual expLog:v1 PUNTOCOMA:pc {: arbol declaracion2 = new arbol("declaracion2");
                        
                       
                                                declaracion2.añadirHijo(new arbol(igual));
                                                declaracion2.añadirHijo(v1);
                                                declaracion2.añadirHijo(new arbol(pc));
                                                
                        
                                                RESULT=declaracion2;
                                                :}
        |PUNTOCOMA:pc {: arbol declaracion2 = new arbol("declaracion2");
                        declaracion2.añadirHijo(new arbol(pc));
                RESULT=declaracion2;
                :}
;

varTipo ::= RSTRING:v1 {: arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                :}
        |RDOUBLE:v1 {: arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                :}
        |RINT:v1 {: arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                :}
        |RCHAR:v1 {: arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                :}
        |RBOOL:v1 {: arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                :}
        |RVOID:v1 {: arbol varTipo = new arbol("varTipo");
                        varTipo.añadirHijo(new arbol(v1));
                RESULT=varTipo;
                :}
;

expLog::= expLog:v1 OR:or expLog1:v2 {: arbol expLog = new arbol("expLog");
                        
                       
                        expLog.añadirHijo(v1);
                        expLog.añadirHijo(new arbol(or));
                        expLog.añadirHijo(v2);
                        
                        RESULT=expLog;
                        :}
        |expLog1:v1 {: arbol expLog = new arbol("expLog");
                        
        expLog.añadirHijo(v1);
                        
        RESULT=expLog;
        :}
;

expLog1 ::= expLog1:v1 AND:and  expLog2:v2 {: arbol expLog1 = new arbol("expLog1");
                        
                       
                        expLog1.añadirHijo(v1);
                        expLog1.añadirHijo(new arbol(and));
                        expLog1.añadirHijo(v2);
                        
                        RESULT=expLog1;
                        :}
        |expLog2:v1 {: arbol expLog1 = new arbol("expLog1");
                        
        expLog1.añadirHijo(v1);
                        
        RESULT=expLog1;
        :}
;

expLog2 ::= expNot:v1 expRel:v2 {: arbol expLog2 = new arbol("expLog2");
                        
                       
                        expLog2.añadirHijo(v1);
                        expLog2.añadirHijo(v2);
                        
                        RESULT=expLog2;
                        :}
        |expRel:v1 {: arbol expLog2 = new arbol("expLog2");
                        
        expLog2.añadirHijo(v1);
                        
        RESULT=expLog2;
        :}
        
;

expNot ::= expNot:v1 NOT:not {: arbol expNot = new arbol("expNot");
                        
                       
                        expNot.añadirHijo(v1);
                        expNot.añadirHijo(new arbol(not));
                        
                        RESULT=expNot;
                        :}
        |NOT:not 
        {: arbol expNot = new arbol("expNot");
                        
        expNot.añadirHijo(new arbol(not));
                        
        RESULT=expNot;
        :}
;




expRel::= expRel:v1 expRel1:v2 {: arbol expRel = new arbol("expRel");
                        
                       
                        expRel.añadirHijo(v1);
                        expRel.añadirHijo(v2);
                        
                        RESULT=expRel;
                        :}
        |expArit:v1 {: arbol expRel = new arbol("expRel");
                        
                        expRel.añadirHijo(v1);
                        
                        RESULT=expRel;
                        :}
;


expRel1::= MAYOR:mayor expArit:v1 {: arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        :}
        |MENOR:menor expArit:v1 {: arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menor));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        :}
        |MAYORIGUAL:mayorigual expArit:v1 {: arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(mayorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        :}
        |MENORIGUAL:menorigual  expArit:v1 {: arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(menorigual));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        :}
        |EQUIVALENTE:equivalente expArit:v1 {: arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(equivalente));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        :}
        |DISTINTO:distinto  expArit:v1 {: arbol expRel1 = new arbol("expRel1");
                        
                       
                        expRel1.añadirHijo(new arbol(distinto));
                        expRel1.añadirHijo(v1);
                        
                        RESULT=expRel1;
                        :}
;


expArit::= expArit:v1 expArit2:v2 {: arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        expArit.añadirHijo(v2);

                        RESULT=expArit;
                        :}
        |expArit3:v1 {: arbol expArit = new arbol("expArit");
                        
                        expArit.añadirHijo(v1);
                        
                        RESULT=expArit;
                        :}
;

expArit2::= MAS:mas expArit3:v1 {: arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(mas));
                        expArit2.añadirHijo(v1);
                        
                        RESULT=expArit2;
                        :}
        |MENOS:menos expArit3:v2 {: arbol expArit2 = new arbol("expArit2");
                        
                       
                        expArit2.añadirHijo(new arbol(menos));
                        expArit2.añadirHijo(v2);
                        
                        RESULT=expArit2;
                        :}
;

expArit3::= expArit3:v1 expArit3Prima:v2 {: arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        expArit3.añadirHijo(v2);
                        
                        RESULT=expArit3;
                        :}
        |expArit4:v1 {: arbol expArit3 = new arbol("expArit3");
                        
                        expArit3.añadirHijo(v1);
                        
                        RESULT=expArit3;
                        :}
;

expArit3Prima::= POR:por expArit4:v1 {: arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(por));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        :}
                |POTENCIA:potencia expArit4:v1 {: arbol expArit3Prima = new arbol("expArit3Prima");
                        
                       
                        expArit3Prima.añadirHijo(new arbol(potencia));
                        expArit3Prima.añadirHijo(v1);
                        
                        RESULT=expArit3Prima;
                        :}
;

expArit4::= expArit4:v1 expArit4Prima:v2 {: arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        expArit4.añadirHijo(v2);
                        
                        RESULT=expArit4;
                        :}
        |expPrima:v1 {: arbol expArit4 = new arbol("expArit4");
                        
                        expArit4.añadirHijo(v1);
                        
                        RESULT=expArit4;
                        :}
;

expArit4Prima::= DIV:div expPrima:v1 {: arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(div));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        :}
                |MODULO:modulo expPrima:v1 {: arbol expArit4Prima = new arbol("expArit4Prima");
                        
                       
                        expArit4Prima.añadirHijo(new arbol(modulo));
                        expArit4Prima.añadirHijo(v1);
                        
                        RESULT=expArit4Prima;
                        :}
;

expPrima::= PAR_IZQ:parI expLog:v1 PAR_DER:parD {: arbol expPrima = new arbol("expPrima");
                                        expPrima.añadirHijo(new arbol(parI));
                                        expPrima.añadirHijo(v1);
                                        expPrima.añadirHijo(new arbol(parD));
                                        RESULT=expPrima;
                                        :}
        |valor1:v1 {: arbol expPrima = new arbol("expPrima");
                        expPrima.añadirHijo(v1);
                RESULT=expPrima;
                :}
        
;

valor1::= MENOS:menos expPrima:v1        {: arbol valor1 = new arbol("valor1");
                                        valor1.añadirHijo(new arbol(menos));
                                        valor1.añadirHijo(v1);

                                        RESULT=valor1;
                                :}


        |valor:v1  {: arbol valor1 = new arbol("valor1");
                        valor1.añadirHijo(v1);
                RESULT=valor1;
                :}
;




valor ::= STRING:v1 {: arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                :}
        |INT:v1 {: arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                :}
        |DECIMAL:v1 {: arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                :}
        |ID:v1 {: arbol valor = new arbol("valorId");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                :}
        |COR_IZQ datoArray COR_DER

        |RTRUE:v1 {: arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                :}
        |RFALSE:v1 {: arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                :}
        |TCHAR:v1 {: arbol valor = new arbol("valor");
                        valor.añadirHijo(new arbol(v1));
                RESULT=valor;
                :}
        |callFunc:v1 {: arbol valor = new arbol("valorFun");
                        valor.añadirHijo(v1);
                RESULT=valor;
                :}
;

callFunc::= ID:id PAR_IZQ:parI lenviarParam:parametros {: arbol callFunc = new arbol("callFunc");

               
                callFunc.añadirHijo(new arbol(id));
                callFunc.añadirHijo(new arbol(parI));
                callFunc.añadirHijo(parametros);
                RESULT=callFunc;
        :}

;

datoArray::= datoArray:v1 COMA:v2 valor1:v3 {: arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                        datoArray.añadirHijo(new arbol(v2));
                        datoArray.añadirHijo(v3);
                RESULT=datoArray;
                :}
        |valor1:v1 {: arbol datoArray = new arbol("datoArray");
                        datoArray.añadirHijo(v1);
                RESULT=datoArray;
                :}
;































