/* The following code was generated by JFlex 1.7.0 */



/* 1. Package e importaciones */
package analizador;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import structuras.elToken;
import structuras.fallos;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizador/Scanner.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7, 53, 53,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9, 34,  2,  0,  0, 50, 51,  3, 45, 46, 11, 47, 39, 48,  5, 10, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 38, 37, 35, 33, 36, 40, 
     0, 19, 31, 23, 26, 21, 27,  6, 28, 15, 29,  6, 22, 30, 16, 17, 
    18,  6, 20, 13, 24, 25, 32,  6,  6,  6,  6, 43,  0, 44, 49,  6, 
     0, 19, 31, 23, 26, 21, 27,  6, 28, 15, 29,  6, 22, 30, 16, 17, 
    18,  6, 20, 13, 24, 25, 32,  6,  6,  6,  6, 41, 52, 42,  0,  0, 
     0,  0,  0,  0,  0, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\2\5\1\6"+
    "\1\7\1\1\1\4\1\1\14\4\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\1"+
    "\1\0\1\32\2\0\1\2\1\0\1\33\1\0\1\33"+
    "\1\4\1\0\14\4\1\0\1\4\1\0\2\4\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\2"+
    "\3\0\2\4\1\0\10\4\1\0\7\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\44\1\0\1\44\1\4"+
    "\1\0\2\4\1\45\5\4\2\46\2\4\1\47\1\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\2\50\1\0"+
    "\1\4\1\0\5\4\1\0\4\4\1\51\2\52\1\53"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\3\4"+
    "\1\54\1\4\1\0\1\4\1\55\1\4\1\56\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\57"+
    "\1\4\1\0\2\4\1\0\1\4\2\60\2\61\2\62"+
    "\1\4\1\63\1\0\1\4\1\64\2\65\1\4\2\66"+
    "\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\66"+
    "\0\154\0\u017a\0\66\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\u05b2\0\u05e8\0\242\0\66"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u0654\0\66\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\66"+
    "\0\u1182\0\u0144\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u0144\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\66\0\u0144\0\u139e\0\u13d4"+
    "\0\u0144\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\66\0\u0144\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u0144\0\66\0\u0144\0\u0144\0\u1878\0\u18ae\0\u18e4\0\u191a"+
    "\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u0144\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u0144\0\u1b36\0\u0144\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u0144\0\u1d52"+
    "\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\66\0\u0144\0\66"+
    "\0\u0144\0\66\0\u0144\0\u1e96\0\u0144\0\u1ecc\0\u1f02\0\u0144"+
    "\0\66\0\u0144\0\u1f38\0\66\0\u0144\0\u0144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\7\1\20\1\7\1\21\1\22\1\7\1\23\1\24"+
    "\1\7\1\25\1\26\1\27\1\7\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\70\0\1\3\6\0\2\3"+
    "\54\0\2\57\1\60\63\57\2\61\1\0\63\61\4\0"+
    "\1\6\1\62\64\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\22\7\37\0\1\63\1\64\70\0\2\65\5\0"+
    "\1\66\44\0\1\7\1\0\1\7\6\0\1\7\1\65"+
    "\1\67\5\7\1\70\13\7\63\0\1\71\33\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\17\7\1\72\2\7"+
    "\31\0\1\7\1\0\1\7\6\0\1\7\1\0\2\7"+
    "\1\73\1\7\1\74\15\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\6\7\1\75\13\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\1\7\1\76\14\7"+
    "\1\77\3\7\31\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\2\7\1\100\1\7\1\101\15\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\5\7\1\102\14\7"+
    "\31\0\1\7\1\0\1\7\6\0\1\7\1\0\2\7"+
    "\1\103\17\7\31\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\4\7\1\104\15\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\4\7\1\105\15\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\106\1\107\21\7\31\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\110\1\111\21\7"+
    "\31\0\1\7\1\0\1\7\6\0\1\7\1\0\2\7"+
    "\1\112\17\7\66\0\1\113\65\0\1\114\65\0\1\115"+
    "\65\0\1\116\107\0\1\117\66\0\1\120\4\0\1\121"+
    "\66\0\1\122\61\0\7\63\1\123\1\0\55\63\12\64"+
    "\1\0\1\124\52\64\20\0\1\125\73\0\1\126\43\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\0\1\7\1\127"+
    "\20\7\31\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\7\7\1\130\12\7\47\0\1\131\47\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\0\3\7\1\132\16\7\31\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\0\5\7\1\133"+
    "\14\7\31\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\5\7\1\134\14\7\31\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\0\11\7\1\135\10\7\31\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\0\11\7\1\136\10\7\31\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\0\6\7\1\137"+
    "\13\7\31\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\1\7\1\140\3\7\1\141\14\7\31\0\1\7\1\0"+
    "\1\7\5\0\1\142\1\143\1\0\5\7\1\144\5\7"+
    "\1\145\6\7\31\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\12\7\1\146\7\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\20\7\1\147\1\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\7\7\1\150\12\7"+
    "\31\0\1\7\1\0\1\7\6\0\1\7\1\0\10\7"+
    "\1\151\11\7\52\0\1\152\44\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\6\7\1\153\13\7\45\0\1\154"+
    "\51\0\1\7\1\0\1\7\6\0\1\7\1\0\1\7"+
    "\1\155\20\7\31\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\156\1\157\21\7\37\0\1\123\74\0\1\160\71\0"+
    "\1\161\44\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\2\7\1\162\17\7\31\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\0\6\7\1\163\13\7\51\0\1\164\45\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\0\5\7\1\165"+
    "\14\7\31\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\13\7\1\166\6\7\31\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\0\4\7\1\167\15\7\31\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\0\2\7\1\170\17\7\31\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\0\6\7\1\171"+
    "\13\7\31\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\10\7\1\172\11\7\31\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\0\11\7\1\173\10\7\31\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\0\11\7\1\174\10\7\46\0"+
    "\1\175\50\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\2\7\1\176\17\7\31\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\0\4\7\1\177\15\7\31\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\0\6\7\1\200\13\7\31\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\0\6\7\1\201"+
    "\13\7\31\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\7\7\1\202\12\7\31\0\1\7\1\0\1\7\5\0"+
    "\1\203\1\204\1\0\22\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\6\7\1\205\13\7\45\0\1\206"+
    "\51\0\1\7\1\0\1\7\6\0\1\7\1\0\1\7"+
    "\1\207\20\7\50\0\1\210\46\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\4\7\1\211\15\7\57\0\1\212"+
    "\37\0\1\7\1\0\1\7\6\0\1\7\1\0\13\7"+
    "\1\213\6\7\54\0\1\214\42\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\10\7\1\215\11\7\43\0\2\216"+
    "\52\0\1\7\1\0\1\7\6\0\1\7\1\216\1\217"+
    "\21\7\31\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\6\7\1\220\13\7\31\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\0\5\7\1\221\14\7\31\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\0\5\7\1\222\14\7\31\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\0\12\7\1\223"+
    "\7\7\31\0\1\7\1\0\1\7\6\0\1\7\1\224"+
    "\1\225\21\7\31\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\4\7\1\226\15\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\10\7\1\227\11\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\1\7\1\230\20\7"+
    "\31\0\1\7\1\0\1\7\6\0\1\7\1\0\6\7"+
    "\1\231\13\7\52\0\1\232\44\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\6\7\1\233\13\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\5\7\1\234\14\7"+
    "\55\0\1\235\41\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\11\7\1\236\10\7\51\0\1\237\45\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\5\7\1\240\14\7"+
    "\55\0\1\241\41\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\11\7\1\242\10\7\63\0\1\243\33\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\17\7\1\244\2\7"+
    "\31\0\1\7\1\0\1\7\6\0\1\7\1\0\14\7"+
    "\1\245\5\7\31\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\1\7\1\246\20\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\2\7\1\247\17\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\11\7\1\250\10\7"+
    "\45\0\1\251\51\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\1\7\1\252\20\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\5\7\1\253\14\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\11\7\1\254\10\7"+
    "\31\0\1\7\1\0\1\7\6\0\1\7\1\0\4\7"+
    "\1\255\15\7\51\0\1\256\45\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\5\7\1\257\14\7\43\0\2\260"+
    "\52\0\1\7\1\0\1\7\6\0\1\7\1\260\1\261"+
    "\21\7\46\0\1\262\50\0\1\7\1\0\1\7\6\0"+
    "\1\7\1\0\2\7\1\263\17\7\43\0\2\264\52\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\264\1\265\21\7"+
    "\31\0\1\7\1\0\1\7\6\0\1\7\1\0\6\7"+
    "\1\266\13\7\31\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\2\7\1\267\17\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\4\7\1\270\15\7\56\0\1\271"+
    "\40\0\1\7\1\0\1\7\6\0\1\7\1\0\12\7"+
    "\1\272\7\7\31\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\6\7\1\273\13\7\50\0\1\274\46\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\4\7\1\275\15\7"+
    "\46\0\1\276\50\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\2\7\1\277\17\7\51\0\1\300\45\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\5\7\1\301\14\7"+
    "\51\0\1\302\45\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\5\7\1\303\14\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\10\7\1\304\11\7\31\0\1\7"+
    "\1\0\1\7\6\0\1\7\1\0\5\7\1\305\14\7"+
    "\50\0\1\306\46\0\1\7\1\0\1\7\6\0\1\7"+
    "\1\0\4\7\1\307\15\7\31\0\1\7\1\0\1\7"+
    "\6\0\1\7\1\0\5\7\1\310\14\7\41\0\2\311"+
    "\54\0\1\7\1\0\1\7\5\0\1\311\1\312\1\0"+
    "\22\7\31\0\1\7\1\0\1\7\6\0\1\7\1\0"+
    "\11\7\1\313\10\7\51\0\1\314\45\0\1\7\1\0"+
    "\1\7\6\0\1\7\1\0\5\7\1\315\14\7\31\0"+
    "\1\7\1\0\1\7\6\0\1\7\1\0\2\7\1\316"+
    "\17\7\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8046];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\2\1\1\11\23\1\16\11"+
    "\2\1\1\0\1\11\2\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\14\1\1\0\1\1\1\0\2\1\7\11"+
    "\1\1\1\11\3\0\2\1\1\0\10\1\1\0\7\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\2\1\1\0\10\1\1\11\5\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\5\1\1\0\5\1\1\11\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\5\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\0\2\1\1\11\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Codigo de usuario en sintaxis java
    //Agregar clases, variables, arreglos, objetos etc...
    public ArrayList<elToken> listaTokens = new ArrayList();

    public ArrayList<fallos> listaErrores = new ArrayList();

    

    
   
    

    public ArrayList<elToken> getTokens(){
        return listaTokens;
    }

    public ArrayList<fallos> getErrores(){
        return listaErrores;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Aqui se debe guardar los valores (yytext(), yyline, yychar ) para posteriormente generar el reporte de errores Léxicos.
    System.out.println("Este es un error lexico: "+yytext()+ ", en la linea: "+yyline+", en la columna: "+yychar);
    listaErrores.add(new fallos(yytext(),"Error Lexico",yyline,yycolumn));
            } 
            // fall through
          case 56: break;
          case 2: 
            { 
            } 
            // fall through
          case 57: break;
          case 3: 
            { System.out.println("Reconocio Entero: "+yytext()); 
    listaTokens.add(new elToken(yytext(),"ENTERO",yyline,yycolumn));
   
    return new Symbol(sym.INT,yyline,yycolumn, yytext());
            } 
            // fall through
          case 58: break;
          case 4: 
            { System.out.println("Reconocio ID: "+yytext()); 
    listaTokens.add(new elToken(yytext(),"ID",yyline,yycolumn));
   
    return new Symbol(sym.ID,yyline,yycolumn, yytext());
            } 
            // fall through
          case 59: break;
          case 5: 
            { yychar=1; yycolumn=0;
            } 
            // fall through
          case 60: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" /"); 
    listaTokens.add(new elToken(yytext(),"DIV",yyline,yycolumn));
   
    return new Symbol(sym.DIV,yyline,yycolumn, yytext());
            } 
            // fall through
          case 61: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" *"); 
    listaTokens.add(new elToken(yytext(),"POR",yyline,yycolumn));
   
    return new Symbol(sym.POR,yyline,yycolumn, yytext());
            } 
            // fall through
          case 62: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" ="); 
    listaTokens.add(new elToken(yytext(),"IGUAL",yyline,yycolumn));
   
    return new Symbol(sym.IGUAL,yyline,yycolumn, yytext());
            } 
            // fall through
          case 63: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" !"); 
    listaTokens.add(new elToken(yytext(),"NOT",yyline,yycolumn));
  
    return new Symbol(sym.NOT,yyline,yycolumn, yytext());
            } 
            // fall through
          case 64: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" <"); 
    listaTokens.add(new elToken(yytext(),"MENOR",yyline,yycolumn));
    
    return new Symbol(sym.MENOR,yyline,yycolumn, yytext());
            } 
            // fall through
          case 65: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" >"); 
    listaTokens.add(new elToken(yytext(),"MAYOR",yyline,yycolumn));
  
    return new Symbol(sym.MAYOR,yyline,yycolumn, yytext());
            } 
            // fall through
          case 66: break;
          case 12: 
            { System.out.println("Reconocio "+yytext()+" punto y coma"); 
        listaTokens.add(new elToken(yytext(),"PUNTOCOMA",yyline,yycolumn));
        
        return new Symbol(sym.PUNTOCOMA,yyline,yycolumn, yytext());
            } 
            // fall through
          case 67: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" :"); 
        listaTokens.add(new elToken(yytext(),"DOSPUNTOS",yyline,yycolumn));
        
        return new Symbol(sym.DOSPUNTOS,yyline,yycolumn, yytext());
            } 
            // fall through
          case 68: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" , coma"); 
        listaTokens.add(new elToken(yytext(),"COMA",yyline,yycolumn));
        
        return new Symbol(sym.COMA ,yyline,yycolumn, yytext());
            } 
            // fall through
          case 69: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" ? "); 
        listaTokens.add(new elToken(yytext(),"INTERROGACION",yyline,yycolumn));
        
        return new Symbol(sym.INTERROGACION ,yyline,yycolumn, yytext());
            } 
            // fall through
          case 70: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" {"); 
    listaTokens.add(new elToken(yytext(),"LL_IZQ",yyline,yycolumn));
    return new Symbol(sym.LL_IZQ,yyline,yycolumn, yytext());
            } 
            // fall through
          case 71: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" }"); 
    listaTokens.add(new elToken(yytext(),"LL_DER",yyline,yycolumn));
    return new Symbol(sym.LL_DER,yyline,yycolumn, yytext());
            } 
            // fall through
          case 72: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()+" ["); 
    listaTokens.add(new elToken(yytext(),"COR_IZQ",yyline,yycolumn));
    return new Symbol(sym.COR_IZQ,yyline,yycolumn, yytext());
            } 
            // fall through
          case 73: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" ]"); 
    listaTokens.add(new elToken(yytext(),"COR_DER",yyline,yycolumn));
    return new Symbol(sym.COR_DER,yyline,yycolumn, yytext());
            } 
            // fall through
          case 74: break;
          case 20: 
            { System.out.println("Reconocio "+yytext()+" ("); 
    listaTokens.add(new elToken(yytext(),"PAR_IZQ",yyline,yycolumn));
   
    return new Symbol(sym.PAR_IZQ,yyline,yycolumn, yytext());
            } 
            // fall through
          case 75: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" )"); 
    listaTokens.add(new elToken(yytext(),"PAR_DER",yyline,yycolumn));
    
    return new Symbol(sym.PAR_DER,yyline,yycolumn, yytext());
            } 
            // fall through
          case 76: break;
          case 22: 
            { System.out.println("Reconocio "+yytext()+" +"); 
    listaTokens.add(new elToken(yytext(),"MAS",yyline,yycolumn));
    
    return new Symbol(sym.MAS,yyline,yycolumn, yytext());
            } 
            // fall through
          case 77: break;
          case 23: 
            { System.out.println("Reconocio "+yytext()+" -"); 
    listaTokens.add(new elToken(yytext(),"MENOS",yyline,yycolumn));
    
    return new Symbol(sym.MENOS,yyline,yycolumn, yytext());
            } 
            // fall through
          case 78: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" ^"); 
    listaTokens.add(new elToken(yytext(),"potencia",yyline,yycolumn));
    
    return new Symbol(sym.POTENCIA,yyline,yycolumn, yytext());
            } 
            // fall through
          case 79: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" %"); 
    listaTokens.add(new elToken(yytext(),"MODULO",yyline,yycolumn));
    
    return new Symbol(sym.MODULO,yyline,yycolumn, yytext());
            } 
            // fall through
          case 80: break;
          case 26: 
            { System.out.println("Reconocio Cadena: "+yytext()); 
    listaTokens.add(new elToken(yytext(),"STRING",yyline,yycolumn));
  
    return new Symbol(sym.STRING,yyline,yycolumn, yytext());
            } 
            // fall through
          case 81: break;
          case 27: 
            { System.out.println("Reconocio if: "+yytext());
    listaTokens.add(new elToken(yytext(),"RIF",yyline,yycolumn));

    return new Symbol(sym.RIF,yyline,yycolumn,yytext());
            } 
            // fall through
          case 82: break;
          case 28: 
            { System.out.println("Reconocio "+yytext()+" =="); 
    listaTokens.add(new elToken(yytext(),"EQUIVALENTE",yyline,yycolumn));
  
    return new Symbol(sym.EQUIVALENTE,yyline,yycolumn, yytext());
            } 
            // fall through
          case 83: break;
          case 29: 
            { System.out.println("Reconocio "+yytext()+" !="); 
    listaTokens.add(new elToken(yytext(),"DISTINTO",yyline,yycolumn));
    return new Symbol(sym.DISTINTO,yyline,yycolumn, yytext());
            } 
            // fall through
          case 84: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" <="); 
    listaTokens.add(new elToken(yytext(),"MENORIGUAL",yyline,yycolumn));
   
    return new Symbol(sym.MENORIGUAL,yyline,yycolumn, yytext());
            } 
            // fall through
          case 85: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" >="); 
    listaTokens.add(new elToken(yytext(),"MAYORIGUAL",yyline,yycolumn));
   
    return new Symbol(sym.MAYORIGUAL,yyline,yycolumn, yytext());
            } 
            // fall through
          case 86: break;
          case 32: 
            { System.out.println("Reconocio "+yytext()+" &&"); 
    listaTokens.add(new elToken(yytext(),"AND",yyline,yycolumn));
  
    return new Symbol(sym.AND,yyline,yycolumn, yytext());
            } 
            // fall through
          case 87: break;
          case 33: 
            { System.out.println("Reconocio "+yytext()+" ||"); 
    listaTokens.add(new elToken(yytext(),"OR",yyline,yycolumn));
   
    return new Symbol(sym.OR,yyline,yycolumn, yytext());
            } 
            // fall through
          case 88: break;
          case 34: 
            { System.out.println("Reconocio caracter: "+yytext()); 
    listaTokens.add(new elToken(yytext(),"TCHAR",yyline,yycolumn));
   
    return new Symbol(sym.TCHAR,yyline,yycolumn, yytext());
            } 
            // fall through
          case 89: break;
          case 35: 
            { System.out.println("Reconocio Decimal: "+yytext()); 
    listaTokens.add(new elToken(yytext(),"DECIMAL",yyline,yycolumn));
    
    return new Symbol(sym.DECIMAL,yyline,yycolumn, yytext());
            } 
            // fall through
          case 90: break;
          case 36: 
            { System.out.println("Reconocio else: "+yytext());
    listaTokens.add(new elToken(yytext(),"RELSE",yyline,yycolumn));

    return new Symbol(sym.RELSE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 91: break;
          case 37: 
            { System.out.println("Reconocio for: "+yytext());
    listaTokens.add(new elToken(yytext(),"RFOR",yyline,yycolumn));

    return new Symbol(sym.RFOR,yyline,yycolumn,yytext());
            } 
            // fall through
          case 92: break;
          case 38: 
            { System.out.println("Reconocio caso: "+yytext());
    listaTokens.add(new elToken(yytext(),"RCASE",yyline,yycolumn));

    return new Symbol(sym.RCASE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 93: break;
          case 39: 
            { System.out.println("Reconocio true: "+yytext());
    listaTokens.add(new elToken(yytext(),"RTRUE",yyline,yycolumn));
    
    return new Symbol(sym.RTRUE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 94: break;
          case 40: 
            { System.out.println("Reconocio void: "+yytext());
    listaTokens.add(new elToken(yytext(),"RVOID",yyline,yycolumn)); 
    return new Symbol(sym.RVOID,yyline,yycolumn,yytext());
            } 
            // fall through
          case 95: break;
          case 41: 
            { System.out.println("Reconocio double: "+yytext()); 
    listaTokens.add(new elToken(yytext(),"RDOUBLE",yyline,yycolumn));
    return new Symbol(sym.RDOUBLE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 96: break;
          case 42: 
            { System.out.println("Reconocio false: "+yytext());
    listaTokens.add(new elToken(yytext(),"RFALSE",yyline,yycolumn));
    
    return new Symbol(sym.RFALSE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 97: break;
          case 43: 
            { System.out.println("Reconocio do: "+yytext());
    listaTokens.add(new elToken(yytext(),"RDO",yyline,yycolumn));

    return new Symbol(sym.RDO,yyline,yycolumn,yytext());
            } 
            // fall through
          case 98: break;
          case 44: 
            { System.out.println("Reconocio int: "+yytext());
    listaTokens.add(new elToken(yytext(),"RINT",yyline,yycolumn)); 
    return new Symbol(sym.RINT,yyline,yycolumn,yytext());
            } 
            // fall through
          case 99: break;
          case 45: 
            { System.out.println("Reconocio break: "+yytext());
    listaTokens.add(new elToken(yytext(),"RBREAK",yyline,yycolumn));

    return new Symbol(sym.RBREAK,yyline,yycolumn,yytext());
            } 
            // fall through
          case 100: break;
          case 46: 
            { System.out.println("Reconocio string: "+yytext());
    listaTokens.add(new elToken(yytext(),"RSTRING",yyline,yycolumn));

    return new Symbol(sym.RSTRING,yyline,yycolumn,yytext());
            } 
            // fall through
          case 101: break;
          case 47: 
            { System.out.println("Reconocio return: "+yytext());
    listaTokens.add(new elToken(yytext(),"RRETURN",yyline,yycolumn));

    return new Symbol(sym.RRETURN,yyline,yycolumn,yytext());
            } 
            // fall through
          case 102: break;
          case 48: 
            { System.out.println("Reconocio bool: "+yytext());
    listaTokens.add(new elToken(yytext(),"RBOOL",yyline,yycolumn)); 
    return new Symbol(sym.RBOOL,yyline,yycolumn,yytext());
            } 
            // fall through
          case 103: break;
          case 49: 
            { System.out.println("Reconocio switch: "+yytext());
    listaTokens.add(new elToken(yytext(),"RSWITCH",yyline,yycolumn));

    return new Symbol(sym.RSWITCH,yyline,yycolumn,yytext());
            } 
            // fall through
          case 104: break;
          case 50: 
            { System.out.println("Reconocio imprimir: "+yytext());
    listaTokens.add(new elToken(yytext(),"RIMPRIMIR",yyline,yycolumn));

    return new Symbol(sym.RIMPRIMIR,yyline,yycolumn,yytext());
            } 
            // fall through
          case 105: break;
          case 51: 
            { System.out.println("Reconocio ejecutar: "+yytext());
    listaTokens.add(new elToken(yytext(),"REJECUTAR",yyline,yycolumn));

    return new Symbol(sym.REJECUTAR,yyline,yycolumn,yytext());
            } 
            // fall through
          case 106: break;
          case 52: 
            { System.out.println("Reconocio char: "+yytext());
    listaTokens.add(new elToken(yytext(),"RCHAR",yyline,yycolumn)); 
    return new Symbol(sym.RCHAR,yyline,yycolumn,yytext());
            } 
            // fall through
          case 107: break;
          case 53: 
            { System.out.println("Reconocio while: "+yytext());
    listaTokens.add(new elToken(yytext(),"RWHILE",yyline,yycolumn));

    return new Symbol(sym.RWHILE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 108: break;
          case 54: 
            { System.out.println("Reconocio continue: "+yytext());
    listaTokens.add(new elToken(yytext(),"RCONTINUE",yyline,yycolumn));

    return new Symbol(sym.RCONTINUE,yyline,yycolumn,yytext());
            } 
            // fall through
          case 109: break;
          case 55: 
            { System.out.println("Reconocio caso: "+yytext());
    listaTokens.add(new elToken(yytext(),"RDEFAULT",yyline,yycolumn));

    return new Symbol(sym.RDEFAULT,yyline,yycolumn,yytext());
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
